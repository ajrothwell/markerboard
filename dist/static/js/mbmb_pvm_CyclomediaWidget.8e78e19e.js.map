{"version":3,"sources":["webpack:///./node_modules/@philly/vue-mapping/src/cyclomedia/Widget.vue?56a7","webpack:///./node_modules/@philly/vue-mapping/src/cyclomedia/Widget.vue?6445","webpack:///./node_modules/proj4/lib/global.js","webpack:///./node_modules/proj4/lib/constants/values.js","webpack:///./node_modules/proj4/lib/constants/PrimeMeridian.js","webpack:///./node_modules/proj4/lib/constants/units.js","webpack:///./node_modules/proj4/lib/match.js","webpack:///./node_modules/proj4/lib/projString.js","webpack:///./node_modules/wkt-parser/parser.js","webpack:///./node_modules/wkt-parser/process.js","webpack:///./node_modules/wkt-parser/index.js","webpack:///./node_modules/proj4/lib/defs.js","webpack:///./node_modules/proj4/lib/parseCode.js","webpack:///./node_modules/proj4/lib/extend.js","webpack:///./node_modules/proj4/lib/common/msfnz.js","webpack:///./node_modules/proj4/lib/common/sign.js","webpack:///./node_modules/proj4/lib/common/adjust_lon.js","webpack:///./node_modules/proj4/lib/common/tsfnz.js","webpack:///./node_modules/proj4/lib/common/phi2z.js","webpack:///./node_modules/proj4/lib/projections/merc.js","webpack:///./node_modules/proj4/lib/projections/longlat.js","webpack:///./node_modules/proj4/lib/projections.js","webpack:///./node_modules/proj4/lib/constants/Ellipsoid.js","webpack:///./node_modules/proj4/lib/deriveConstants.js","webpack:///./node_modules/proj4/lib/constants/Datum.js","webpack:///./node_modules/proj4/lib/datum.js","webpack:///./node_modules/proj4/lib/Proj.js","webpack:///./node_modules/proj4/lib/datumUtils.js","webpack:///./node_modules/proj4/lib/datum_transform.js","webpack:///./node_modules/proj4/lib/adjust_axis.js","webpack:///./node_modules/proj4/lib/common/toPoint.js","webpack:///./node_modules/proj4/lib/checkSanity.js","webpack:///./node_modules/proj4/lib/transform.js","webpack:///./node_modules/proj4/lib/core.js","webpack:///./node_modules/mgrs/mgrs.js","webpack:///./node_modules/proj4/lib/Point.js","webpack:///./node_modules/proj4/lib/common/pj_enfn.js","webpack:///./node_modules/proj4/lib/common/pj_mlfn.js","webpack:///./node_modules/proj4/lib/common/pj_inv_mlfn.js","webpack:///./node_modules/proj4/lib/projections/tmerc.js","webpack:///./node_modules/proj4/lib/common/sinh.js","webpack:///./node_modules/proj4/lib/common/hypot.js","webpack:///./node_modules/proj4/lib/common/log1py.js","webpack:///./node_modules/proj4/lib/common/asinhy.js","webpack:///./node_modules/proj4/lib/common/gatg.js","webpack:///./node_modules/proj4/lib/common/clens.js","webpack:///./node_modules/proj4/lib/common/cosh.js","webpack:///./node_modules/proj4/lib/common/clens_cmplx.js","webpack:///./node_modules/proj4/lib/projections/etmerc.js","webpack:///./node_modules/proj4/lib/common/adjust_zone.js","webpack:///./node_modules/proj4/lib/projections/utm.js","webpack:///./node_modules/proj4/lib/common/srat.js","webpack:///./node_modules/proj4/lib/projections/gauss.js","webpack:///./node_modules/proj4/lib/projections/sterea.js","webpack:///./node_modules/proj4/lib/projections/stere.js","webpack:///./node_modules/proj4/lib/projections/somerc.js","webpack:///./node_modules/proj4/lib/projections/omerc.js","webpack:///./node_modules/proj4/lib/projections/lcc.js","webpack:///./node_modules/proj4/lib/projections/krovak.js","webpack:///./node_modules/proj4/lib/common/mlfn.js","webpack:///./node_modules/proj4/lib/common/e0fn.js","webpack:///./node_modules/proj4/lib/common/e1fn.js","webpack:///./node_modules/proj4/lib/common/e2fn.js","webpack:///./node_modules/proj4/lib/common/e3fn.js","webpack:///./node_modules/proj4/lib/common/gN.js","webpack:///./node_modules/proj4/lib/common/adjust_lat.js","webpack:///./node_modules/proj4/lib/common/imlfn.js","webpack:///./node_modules/proj4/lib/projections/cass.js","webpack:///./node_modules/proj4/lib/common/qsfnz.js","webpack:///./node_modules/proj4/lib/projections/laea.js","webpack:///./node_modules/proj4/lib/common/asinz.js","webpack:///./node_modules/proj4/lib/projections/aea.js","webpack:///./node_modules/proj4/lib/projections/gnom.js","webpack:///./node_modules/proj4/lib/common/iqsfnz.js","webpack:///./node_modules/proj4/lib/projections/cea.js","webpack:///./node_modules/proj4/lib/projections/eqc.js","webpack:///./node_modules/proj4/lib/projections/poly.js","webpack:///./node_modules/proj4/lib/projections/nzmg.js","webpack:///./node_modules/proj4/lib/projections/mill.js","webpack:///./node_modules/proj4/lib/projections/sinu.js","webpack:///./node_modules/proj4/lib/projections/moll.js","webpack:///./node_modules/proj4/lib/projections/eqdc.js","webpack:///./node_modules/proj4/lib/projections/vandg.js","webpack:///./node_modules/proj4/lib/projections/aeqd.js","webpack:///./node_modules/proj4/lib/projections/ortho.js","webpack:///./node_modules/proj4/lib/projections/qsc.js","webpack:///./node_modules/proj4/lib/projections/robin.js","webpack:///./node_modules/proj4/projs.js","webpack:///./node_modules/proj4/lib/index.js","webpack:///node_modules/@philly/vue-mapping/src/cyclomedia/Widget.vue","webpack:///./node_modules/@philly/vue-mapping/src/cyclomedia/Widget.vue?aef8","webpack:///./node_modules/@philly/vue-mapping/src/cyclomedia/Widget.vue"],"names":["_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_css_loader_index_js_ref_6_oneOf_1_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_6_oneOf_1_2_cache_loader_dist_cjs_js_ref_0_0_vue_loader_lib_index_js_vue_loader_options_Widget_vue_vue_type_style_index_0_id_51535d13_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_css_loader_index_js_ref_6_oneOf_1_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_6_oneOf_1_2_cache_loader_dist_cjs_js_ref_0_0_vue_loader_lib_index_js_vue_loader_options_Widget_vue_vue_type_style_index_0_id_51535d13_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default","n","render","_vm","this","_h","$createElement","_c","_self","class","cycloContainerClass","attrs","id","isMobileOrTablet","popoutAble","style","right","popoutPosition","on","click","popoutClicked","staticClass","icon","_e","ref","staticRenderFns","global","defs","WGS84","GOOGLE","PJD_3PARAM","PJD_7PARAM","PJD_WGS84","PJD_NODATUM","SEC_TO_RAD","HALF_PI","Math","PI","SIXTH","RA4","RA6","EPSLN","D2R","R2D","FORTPI","TWO_PI","SPI","PrimeMeridian_exports","greenwich","lisbon","paris","bogota","madrid","rome","bern","jakarta","ferro","brussels","stockholm","athens","oslo","units","ft","to_meter","us-ft","ignoredChar","match","obj","key","testkey","processedKey","keys","Object","lkey","toLowerCase","replace","i","length","projString","defData","paramName","paramVal","paramOutname","self","paramObj","split","map","v","trim","filter","a","reduce","p","push","params","proj","datum","rf","parseFloat","lat_0","lat0","lat_1","lat1","lat_2","lat2","lat_ts","lon_0","long0","lon_1","long1","lon_2","long2","alpha","lonc","longc","x_0","x0","y_0","y0","k_0","k0","k","b","r_a","R_A","zone","parseInt","south","utmSouth","towgs84","datum_params","unit","from_greenwich","pm","nadgrids","datumCode","axis","legalAxis","indexOf","substr","parser","NEUTRAL","KEYWORD","NUMBER","QUOTED","AFTERQUOTE","ENDED","whitespace","latin","keyword","endThings","digets","Parser","text","Error","level","place","root","stack","currentObject","state","parseString","txt","output","mapit","value","Array","isArray","unshift","thing","out","newObj","item","sExpr","shift","name","convert","prototype","readCharicter","char","test","neutral","quoted","afterquote","number","word","afterItem","pop","newObjects","wkt_parser_D2R","rename","outName","inName","d2r","input","cleanWKT","wkt","type","projName","local","PROJECTION","UNIT","DATUM","SPHEROID","geogcs","GEOGCS","toMeter","ratio","slice","sphere","ellps","TOWGS84","isFinite","renamer","list","forEach","wkt_parser","lisp","that","arguments","def","charAt","apply","EPSG","ESRI","IAU2000","console","log","lib_defs","testObj","code","testDef","codeWords","testWKT","some","codes","checkMercator","auth","checkProjStr","ext","testProj","parse","maybeProjStr","parseCode","extend","destination","source","property","undefined","msfnz","eccent","sinphi","cosphi","con","sqrt","sign","x","adjust_lon","abs","tsfnz","phi","com","pow","tan","phi2z","ts","dphi","eccnth","atan","sin","init","es","e","cos","forward","y","lon","lat","inverse","exp","names","merc","longlat_init","identity","pt","longlat_names","longlat","projs","projections_names","projStore","add","len","get","start","projections","Ellipsoid_exports","MERIT","ellipseName","SGS85","GRS80","IAU76","airy","APL4","NWL9D","mod_airy","andrae","aust_SA","GRS67","bessel","bess_nam","clrk66","clrk80","clrk58","CPM","delmbr","engelis","evrst30","evrst48","evrst56","evrst69","evrstSS","fschr60","fschr60m","fschr68","helmert","hough","intl","kaula","lerch","mprts","new_intl","plessis","krass","SEasia","walbeck","WGS60","WGS66","WGS7","eccentricity","a2","b2","ep2","deriveConstants_sphere","ellipse","Datum_exports","datum_type","wgs84","datumName","ch1903","ggrs87","nad83","nad27","potsdam","carthage","hermannskogel","osni52","ire65","rassadiran","nzgd49","osgb36","s_jtsk","beduaram","gunung_segara","rnb72","lib_datum","Projection","srsCode","callback","error","json","ourProj","datumDef","sphere_","ecc","datumObj","Proj","compareDatums","dest","geodeticToGeocentric","Rn","Sin_Lat","Sin2_Lat","Cos_Lat","Longitude","Latitude","Height","z","Infinity","geocentricToGeodetic","P","RR","CT","ST","RX","RK","RN","CPHI0","SPHI0","CPHI","SPHI","SDPHI","iter","genau","genau2","maxiter","X","Y","Z","atan2","geocentricToWgs84","Dx_BF","Dy_BF","Dz_BF","Rx_BF","Ry_BF","Rz_BF","M_BF","geocentricFromWgs84","x_tmp","y_tmp","z_tmp","checkParams","datum_transform","point","adjust_axis","crs","denorm","t","xin","yin","zin","toPoint","array","m","checkSanity","checkCoord","num","Number","TypeError","checkNotWGS","transform","core_wgs84","transformer","from","to","coords","transformedArray","checkProj","oProj","core_proj4","fromProj","toProj","coord","single","core","NUM_100K_SETS","SET_ORIGIN_COLUMN_LETTERS","SET_ORIGIN_ROW_LETTERS","mgrs_A","I","O","mgrs_V","mgrs_Z","mgrs","mgrs_forward","mgrs_inverse","mgrs_toPoint","ll","accuracy","encode","LLtoUTM","bbox","UTMtoLL","decode","toUpperCase","left","bottom","top","degToRad","deg","radToDeg","rad","LongOrigin","eccPrimeSquared","N","T","C","A","M","LongOriginRad","ZoneNumber","Lat","Long","eccSquared","LatRad","LongRad","floor","UTMEasting","UTMNorthing","northing","round","easting","zoneNumber","zoneLetter","getLetterDesignator","utm","N1","T1","C1","R1","D","mu","phi1Rad","e1","result","topRight","LetterDesignator","seasting","snorthing","get100kID","setParm","get100kSetForZone","setColumn","setRow","getLetter100kID","column","row","parm","index","colOrigin","charCodeAt","rowOrigin","colInt","rowInt","rollover","twoLetter","String","fromCharCode","mgrsString","testChar","hunK","sb","substring","set","east100k","getEastingFromChar","north100k","getNorthingFromChar","getMinNorthing","remainder","accuracyBonus","sepEastingString","sepNorthingString","sep","sepEasting","sepNorthing","curCol","eastingValue","rewindMarker","curRow","northingValue","Point","warn","fromMGRS","mgrsStr","toMGRS","lib_Point","C00","C02","C04","C06","C08","C22","C44","C46","C48","C66","C68","C88","pj_enfn","en","pj_mlfn","sphi","cphi","MAX_ITER","pj_inv_mlfn","arg","s","tmerc_init","ml0","tmerc_forward","delta_lon","sin_phi","cos_phi","al","als","c","cs","tq","ml","acos","tmerc_inverse","tan_phi","d","ds","f","g","temp","h","asin","tmerc_names","tmerc","sinh","r","hypot","max","min","log1py","asinhy","gatg","pp","B","cos_2B","h1","h2","clens","arg_r","hr","hr1","hr2","cosh","clens_cmplx","arg_i","hi2","sin_arg_r","cos_arg_r","sinh_arg_i","cosh_arg_i","j","hi1","hi","etmerc_init","cgb","cbg","utg","gtu","np","Qn","Zb","etmerc_forward","Ce","Cn","sin_Cn","cos_Cn","sin_Ce","cos_Ce","tmp","etmerc_inverse","etmerc_names","etmerc","adjust_zone","dependsOn","utm_init","utm_names","srat","esinp","gauss_MAX_ITER","gauss_init","rc","phic0","ratexp","K","gauss_forward","gauss_inverse","DEL_TOL","gauss_names","gauss","sterea_init","sinc0","cosc0","R2","title","sterea_forward","sinc","cosc","cosl","sterea_inverse","rho","sterea_names","sterea","ssfn_","phit","eccen","stere_init","coslat0","sinlat0","isNaN","cons","ms1","X0","cosX0","sinX0","stere_forward","sinX","cosX","rh","sinlat","coslat","dlon","NaN","stere_inverse","ce","Chi","stere_names","stere","somerc_init","phy0","lambda0","sinPhy0","semiMajorAxis","invF","flattening","e2","R","b0","k1","k2","k3","somerc_forward","Sa1","Sa2","S","rotI","rotB","somerc_inverse","lambda","phy","prevPhy","iteration","somerc_names","somerc","omerc_init","no_off","no_rot","bl","fl","gl","t0","dl","t1","t2","el","hl","jl","pl","dlon12","dlon10","gamma0","uc","omerc_forward","us","vs","ql","sl","tl","vl","ul","POSITIVE_INFINITY","omerc_inverse","qp","sp","tp","vp","up","omerc_names","omerc","lcc_init","sin1","cos1","ts1","sin2","cos2","ms2","ts2","ts0","ns","f0","lcc_forward","rh1","theta","lcc_inverse","lcc_names","lcc","krovak_init","s45","s90","fi0","alfa","uq","u0","n0","s0","ro0","ad","krovak_forward","gfi","u","deltav","eps","ro","czech","krovak_inverse","fi1","ok","krovak_names","krovak","mlfn","e0","e3","e0fn","e1fn","e2fn","e3fn","gN","adjust_lat","imlfn","cass_init","cass_forward","lam","nl","asq","cl","cass_inverse","dd","ml1","phi1","nl1","rl1","tl1","dsq","cass_names","cass","qsfnz","S_POLE","N_POLE","EQUIT","OBLIQ","laea_init","mode","mmf","apa","authset","rq","xmf","ymf","sinb1","cosb1","sinph0","cosph0","laea_forward","coslam","sinlam","q","sinb","cosb","phi0","laea_inverse","cCe","sCe","ab","cosz","sinz","authlat","P00","P01","P02","P10","P11","P20","APA","beta","laea_names","laea","asinz","aea_init","sin_po","cos_po","qs1","qs2","t3","qs0","ns0","aea_forward","qs","aea_inverse","phi1z","eccnts","aea_names","aea","gnom_init","sin_p14","cos_p14","infinity_dist","gnom_forward","coslon","ksp","gnom_inverse","gnom_names","gnom","iqsfnz","cea_init","cea_forward","cea_inverse","cea_names","cea","eqc_init","eqc_forward","dlat","eqc_inverse","eqc_names","eqc","poly_MAX_ITER","poly_init","poly_forward","poly_inverse","tanphi","mln","mlnp","ma","poly_names","poly","nzmg_init","B_re","B_im","C_re","C_im","nzmg_forward","delta_lat","d_phi","d_lambda","d_phi_n","d_psi","th_n_re1","th_n_im1","th_re","th_im","th_n_re","th_n_im","z_re","z_im","nzmg_inverse","z_n_re1","z_n_im1","delta_x","delta_y","z_n_re","z_n_im","iterations","num_re","num_im","den_re","den_im","den2","d_psi_n","nzmg_names","nzmg","mill_init","mill_forward","mill_inverse","mill_names","mill","sinu_MAX_ITER","sinu_init","C_y","C_x","sinu_forward","V","sinu_inverse","sinu_names","sinu","moll_init","moll_forward","delta_theta","moll_inverse","moll_names","moll","eqdc_init","ml2","eqdc_forward","eqdc_inverse","eqdc_names","eqdc","vandg_init","vandg_forward","sinth","costh","gsq","msq","vandg_inverse","xx","yy","xys","c1","c2","c3","a1","m1","th1","vandg_names","vandg","aeqd_init","sin_p12","cos_p12","aeqd_forward","Mlp","Ml","Nl1","Nl","psi","Az","G","H","GH","Hs","kp","cos_c","s2","s3","s4","s5","aeqd_inverse","cosAz","Ee","F","aeqd_names","aeqd","ortho_init","ortho_forward","ortho_inverse","ortho_names","ortho","FACE_ENUM","FRONT","RIGHT","BACK","LEFT","TOP","BOTTOM","AREA_ENUM","AREA_0","AREA_1","AREA_2","AREA_3","qsc_init","face","one_minus_f","one_minus_f_squared","qsc_forward","xy","area","sinlon","qsc_shift_lon_origin","qsc_fwd_equat_face_theta","qsc_inverse","nu","cosmu","tannu","tantheta","invert_sign","xa","lp","offset","slon","qsc_names","qsc","COEFS_X","COEFS_Y","FXC","FYC","RC1","NODES","poly3_val","coefs","poly3_der","newton_rapshon","f_df","max_err","iters","upd","robin_init","robin_forward","robin_inverse","robin_names","robin","proj4_projs","proj4","defaultDatum","version","proj4_package","lib","Widgetvue_type_script_lang_js_","data","docWidth","divWidth","props","computed","$store","fullScreenMapEnabled","answer","$config","cyclomedia","cyclomediaInitialized","initialized","cyclomediaActive","active","pictometryActive","pictometry","locForCyclo","geocodeData","geocode","geometry","coordinates","latLngFromMap","mapCenter","center","navBarOpen","projection4326","projection2272","watch","setDivWidth","newCoords","setNewLocation","lng","_this","StreetSmartApi","targetElement","$refs","cycloviewer","username","password","apiKey","srs","locale","addressSettings","database","then","err","window","addEventListener","newActiveStatus","updated","panoramaViewer","rotateRight","methods","document","body","clientWidth","getElementById","divStyle","getComputedStyle","getPropertyValue","$props","screenPercent","viewerType","ViewerType","PANORAMA","coords2272","open","closable","maximizable","widget","getType","sendOrientationToStore","toggleNavbarExpanded","toggleButtonEnabled","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","overlays","Symbol","iterator","next","done","overlay","visible","toggleOverlay","return","measurementAllowed","removeOverlay","orientation","yaw","xyz","getNavbarExpanded","commit","bind","catch","reason","hFov","lnglat","getCenter","cyclomedia_Widgetvue_type_script_lang_js_","component","componentNormalizer","__webpack_exports__"],"mappings":"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","file":"static/js/mbmb_pvm_CyclomediaWidget.8e78e19e.js","sourcesContent":["import mod from \"-!../../../../mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../css-loader/index.js??ref--6-oneOf-1-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../../cache-loader/dist/cjs.js??ref--0-0!../../../../vue-loader/lib/index.js??vue-loader-options!./Widget.vue?vue&type=style&index=0&id=51535d13&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../../mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../css-loader/index.js??ref--6-oneOf-1-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../../cache-loader/dist/cjs.js??ref--0-0!../../../../vue-loader/lib/index.js??vue-loader-options!./Widget.vue?vue&type=style&index=0&id=51535d13&scoped=true&lang=css&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:this.cycloContainerClass,attrs:{\"id\":\"cyclo-container\"}},[(this.isMobileOrTablet === false && this.popoutAble === true)?_c('div',{style:({ right: _vm.popoutPosition }),attrs:{\"id\":\"inCycloDiv\"},on:{\"click\":this.popoutClicked}},[_c('font-awesome-icon',{staticClass:\"popout-icon\",attrs:{\"icon\":\"external-link-alt\"}})],1):_vm._e(),_c('div',{ref:\"cycloviewer\",staticClass:\"panoramaViewerWindow\",attrs:{\"id\":\"cycloviewer\"}})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export default function(defs) {\n  defs('EPSG:4326', \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\");\n  defs('EPSG:4269', \"+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees\");\n  defs('EPSG:3857', \"+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\");\n\n  defs.WGS84 = defs['EPSG:4326'];\n  defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857\n  defs.GOOGLE = defs['EPSG:3857'];\n  defs['EPSG:900913'] = defs['EPSG:3857'];\n  defs['EPSG:102113'] = defs['EPSG:3857'];\n}\n","export var PJD_3PARAM = 1;\nexport var PJD_7PARAM = 2;\nexport var PJD_WGS84 = 4; // WGS84 or equivalent\nexport var PJD_NODATUM = 5; // WGS84 or equivalent\nexport var SEC_TO_RAD = 4.84813681109535993589914102357e-6;\nexport var HALF_PI = Math.PI/2;\n// ellipoid pj_set_ell.c\nexport var SIXTH = 0.1666666666666666667;\n/* 1/6 */\nexport var RA4 = 0.04722222222222222222;\n/* 17/360 */\nexport var RA6 = 0.02215608465608465608;\nexport var EPSLN = 1.0e-10;\n// you'd think you could use Number.EPSILON above but that makes\n// Mollweide get into an infinate loop.\n\nexport var D2R = 0.01745329251994329577;\nexport var R2D = 57.29577951308232088;\nexport var FORTPI = Math.PI/4;\nexport var TWO_PI = Math.PI * 2;\n// SPI is slightly greater than Math.PI, so values that exceed the -180..180\n// degree range by a tiny amount don't get wrapped. This prevents points that\n// have drifted from their original location along the 180th meridian (due to\n// floating point error) from changing their sign.\nexport var SPI = 3.14159265359;\n","var exports = {};\nexport {exports as default};\n\nexports.greenwich = 0.0; //\"0dE\",\nexports.lisbon = -9.131906111111; //\"9d07'54.862\\\"W\",\nexports.paris = 2.337229166667; //\"2d20'14.025\\\"E\",\nexports.bogota = -74.080916666667; //\"74d04'51.3\\\"W\",\nexports.madrid = -3.687938888889; //\"3d41'16.58\\\"W\",\nexports.rome = 12.452333333333; //\"12d27'8.4\\\"E\",\nexports.bern = 7.439583333333; //\"7d26'22.5\\\"E\",\nexports.jakarta = 106.807719444444; //\"106d48'27.79\\\"E\",\nexports.ferro = -17.666666666667; //\"17d40'W\",\nexports.brussels = 4.367975; //\"4d22'4.71\\\"E\",\nexports.stockholm = 18.058277777778; //\"18d3'29.8\\\"E\",\nexports.athens = 23.7163375; //\"23d42'58.815\\\"E\",\nexports.oslo = 10.722916666667; //\"10d43'22.5\\\"E\"\n","export default {\n  ft: {to_meter: 0.3048},\n  'us-ft': {to_meter: 1200 / 3937}\n};\n","var ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nexport default function match(obj, key) {\n  if (obj[key]) {\n    return obj[key];\n  }\n  var keys = Object.keys(obj);\n  var lkey = key.toLowerCase().replace(ignoredChar, '');\n  var i = -1;\n  var testkey, processedKey;\n  while (++i < keys.length) {\n    testkey = keys[i];\n    processedKey = testkey.toLowerCase().replace(ignoredChar, '');\n    if (processedKey === lkey) {\n      return obj[testkey];\n    }\n  }\n}\n","import {D2R} from './constants/values';\nimport PrimeMeridian from './constants/PrimeMeridian';\nimport units from './constants/units';\nimport match from './match';\n\nexport default function(defData) {\n  var self = {};\n  var paramObj = defData.split('+').map(function(v) {\n    return v.trim();\n  }).filter(function(a) {\n    return a;\n  }).reduce(function(p, a) {\n    var split = a.split('=');\n    split.push(true);\n    p[split[0].toLowerCase()] = split[1];\n    return p;\n  }, {});\n  var paramName, paramVal, paramOutname;\n  var params = {\n    proj: 'projName',\n    datum: 'datumCode',\n    rf: function(v) {\n      self.rf = parseFloat(v);\n    },\n    lat_0: function(v) {\n      self.lat0 = v * D2R;\n    },\n    lat_1: function(v) {\n      self.lat1 = v * D2R;\n    },\n    lat_2: function(v) {\n      self.lat2 = v * D2R;\n    },\n    lat_ts: function(v) {\n      self.lat_ts = v * D2R;\n    },\n    lon_0: function(v) {\n      self.long0 = v * D2R;\n    },\n    lon_1: function(v) {\n      self.long1 = v * D2R;\n    },\n    lon_2: function(v) {\n      self.long2 = v * D2R;\n    },\n    alpha: function(v) {\n      self.alpha = parseFloat(v) * D2R;\n    },\n    lonc: function(v) {\n      self.longc = v * D2R;\n    },\n    x_0: function(v) {\n      self.x0 = parseFloat(v);\n    },\n    y_0: function(v) {\n      self.y0 = parseFloat(v);\n    },\n    k_0: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    k: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    a: function(v) {\n      self.a = parseFloat(v);\n    },\n    b: function(v) {\n      self.b = parseFloat(v);\n    },\n    r_a: function() {\n      self.R_A = true;\n    },\n    zone: function(v) {\n      self.zone = parseInt(v, 10);\n    },\n    south: function() {\n      self.utmSouth = true;\n    },\n    towgs84: function(v) {\n      self.datum_params = v.split(\",\").map(function(a) {\n        return parseFloat(a);\n      });\n    },\n    to_meter: function(v) {\n      self.to_meter = parseFloat(v);\n    },\n    units: function(v) {\n      self.units = v;\n      var unit = match(units, v);\n      if (unit) {\n        self.to_meter = unit.to_meter;\n      }\n    },\n    from_greenwich: function(v) {\n      self.from_greenwich = v * D2R;\n    },\n    pm: function(v) {\n      var pm = match(PrimeMeridian, v);\n      self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;\n    },\n    nadgrids: function(v) {\n      if (v === '@null') {\n        self.datumCode = 'none';\n      }\n      else {\n        self.nadgrids = v;\n      }\n    },\n    axis: function(v) {\n      var legalAxis = \"ewnsud\";\n      if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\n        self.axis = v;\n      }\n    }\n  };\n  for (paramName in paramObj) {\n    paramVal = paramObj[paramName];\n    if (paramName in params) {\n      paramOutname = params[paramName];\n      if (typeof paramOutname === 'function') {\n        paramOutname(paramVal);\n      }\n      else {\n        self[paramOutname] = paramVal;\n      }\n    }\n    else {\n      self[paramName] = paramVal;\n    }\n  }\n  if(typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\"){\n    self.datumCode = self.datumCode.toLowerCase();\n  }\n  return self;\n}\n","export default parseString;\n\nvar NEUTRAL = 1;\nvar KEYWORD = 2;\nvar NUMBER = 3;\nvar QUOTED = 4;\nvar AFTERQUOTE = 5;\nvar ENDED = -1;\nvar whitespace = /\\s/;\nvar latin = /[A-Za-z]/;\nvar keyword = /[A-Za-z84]/;\nvar endThings = /[,\\]]/;\nvar digets = /[\\d\\.E\\-\\+]/;\n// const ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nfunction Parser(text) {\n  if (typeof text !== 'string') {\n    throw new Error('not a string');\n  }\n  this.text = text.trim();\n  this.level = 0;\n  this.place = 0;\n  this.root = null;\n  this.stack = [];\n  this.currentObject = null;\n  this.state = NEUTRAL;\n}\nParser.prototype.readCharicter = function() {\n  var char = this.text[this.place++];\n  if (this.state !== QUOTED) {\n    while (whitespace.test(char)) {\n      if (this.place >= this.text.length) {\n        return;\n      }\n      char = this.text[this.place++];\n    }\n  }\n  switch (this.state) {\n    case NEUTRAL:\n      return this.neutral(char);\n    case KEYWORD:\n      return this.keyword(char)\n    case QUOTED:\n      return this.quoted(char);\n    case AFTERQUOTE:\n      return this.afterquote(char);\n    case NUMBER:\n      return this.number(char);\n    case ENDED:\n      return;\n  }\n};\nParser.prototype.afterquote = function(char) {\n  if (char === '\"') {\n    this.word += '\"';\n    this.state = QUOTED;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = this.word.trim();\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in afterquote yet, index ' + this.place);\n};\nParser.prototype.afterItem = function(char) {\n  if (char === ',') {\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n    }\n    this.word = null;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (char === ']') {\n    this.level--;\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n      this.word = null;\n    }\n    this.state = NEUTRAL;\n    this.currentObject = this.stack.pop();\n    if (!this.currentObject) {\n      this.state = ENDED;\n    }\n\n    return;\n  }\n};\nParser.prototype.number = function(char) {\n  if (digets.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = parseFloat(this.word);\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in number yet, index ' + this.place);\n};\nParser.prototype.quoted = function(char) {\n  if (char === '\"') {\n    this.state = AFTERQUOTE;\n    return;\n  }\n  this.word += char;\n  return;\n};\nParser.prototype.keyword = function(char) {\n  if (keyword.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (char === '[') {\n    var newObjects = [];\n    newObjects.push(this.word);\n    this.level++;\n    if (this.root === null) {\n      this.root = newObjects;\n    } else {\n      this.currentObject.push(newObjects);\n    }\n    this.stack.push(this.currentObject);\n    this.currentObject = newObjects;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in keyword yet, index ' + this.place);\n};\nParser.prototype.neutral = function(char) {\n  if (latin.test(char)) {\n    this.word = char;\n    this.state = KEYWORD;\n    return;\n  }\n  if (char === '\"') {\n    this.word = '';\n    this.state = QUOTED;\n    return;\n  }\n  if (digets.test(char)) {\n    this.word = char;\n    this.state = NUMBER;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in neutral yet, index ' + this.place);\n};\nParser.prototype.output = function() {\n  while (this.place < this.text.length) {\n    this.readCharicter();\n  }\n  if (this.state === ENDED) {\n    return this.root;\n  }\n  throw new Error('unable to parse string \"' +this.text + '\". State is ' + this.state);\n};\n\nfunction parseString(txt) {\n  var parser = new Parser(txt);\n  return parser.output();\n}\n","\n\nfunction mapit(obj, key, value) {\n  if (Array.isArray(key)) {\n    value.unshift(key);\n    key = null;\n  }\n  var thing = key ? {} : obj;\n\n  var out = value.reduce(function(newObj, item) {\n    sExpr(item, newObj);\n    return newObj\n  }, thing);\n  if (key) {\n    obj[key] = out;\n  }\n}\n\nexport function sExpr(v, obj) {\n  if (!Array.isArray(v)) {\n    obj[v] = true;\n    return;\n  }\n  var key = v.shift();\n  if (key === 'PARAMETER') {\n    key = v.shift();\n  }\n  if (v.length === 1) {\n    if (Array.isArray(v[0])) {\n      obj[key] = {};\n      sExpr(v[0], obj[key]);\n      return;\n    }\n    obj[key] = v[0];\n    return;\n  }\n  if (!v.length) {\n    obj[key] = true;\n    return;\n  }\n  if (key === 'TOWGS84') {\n    obj[key] = v;\n    return;\n  }\n  if (!Array.isArray(key)) {\n    obj[key] = {};\n  }\n\n  var i;\n  switch (key) {\n    case 'UNIT':\n    case 'PRIMEM':\n    case 'VERT_DATUM':\n      obj[key] = {\n        name: v[0].toLowerCase(),\n        convert: v[1]\n      };\n      if (v.length === 3) {\n        sExpr(v[2], obj[key]);\n      }\n      return;\n    case 'SPHEROID':\n    case 'ELLIPSOID':\n      obj[key] = {\n        name: v[0],\n        a: v[1],\n        rf: v[2]\n      };\n      if (v.length === 4) {\n        sExpr(v[3], obj[key]);\n      }\n      return;\n    case 'PROJECTEDCRS':\n    case 'PROJCRS':\n    case 'GEOGCS':\n    case 'GEOCCS':\n    case 'PROJCS':\n    case 'LOCAL_CS':\n    case 'GEODCRS':\n    case 'GEODETICCRS':\n    case 'GEODETICDATUM':\n    case 'EDATUM':\n    case 'ENGINEERINGDATUM':\n    case 'VERT_CS':\n    case 'VERTCRS':\n    case 'VERTICALCRS':\n    case 'COMPD_CS':\n    case 'COMPOUNDCRS':\n    case 'ENGINEERINGCRS':\n    case 'ENGCRS':\n    case 'FITTED_CS':\n    case 'LOCAL_DATUM':\n    case 'DATUM':\n      v[0] = ['name', v[0]];\n      mapit(obj, key, v);\n      return;\n    default:\n      i = -1;\n      while (++i < v.length) {\n        if (!Array.isArray(v[i])) {\n          return sExpr(v, obj[key]);\n        }\n      }\n      return mapit(obj, key, v);\n  }\n}\n","var D2R = 0.01745329251994329577;\nimport parser from './parser';\nimport {sExpr} from './process';\n\n\n\nfunction rename(obj, params) {\n  var outName = params[0];\n  var inName = params[1];\n  if (!(outName in obj) && (inName in obj)) {\n    obj[outName] = obj[inName];\n    if (params.length === 3) {\n      obj[outName] = params[2](obj[outName]);\n    }\n  }\n}\n\nfunction d2r(input) {\n  return input * D2R;\n}\n\nfunction cleanWKT(wkt) {\n  if (wkt.type === 'GEOGCS') {\n    wkt.projName = 'longlat';\n  } else if (wkt.type === 'LOCAL_CS') {\n    wkt.projName = 'identity';\n    wkt.local = true;\n  } else {\n    if (typeof wkt.PROJECTION === 'object') {\n      wkt.projName = Object.keys(wkt.PROJECTION)[0];\n    } else {\n      wkt.projName = wkt.PROJECTION;\n    }\n  }\n  if (wkt.UNIT) {\n    wkt.units = wkt.UNIT.name.toLowerCase();\n    if (wkt.units === 'metre') {\n      wkt.units = 'meter';\n    }\n    if (wkt.UNIT.convert) {\n      if (wkt.type === 'GEOGCS') {\n        if (wkt.DATUM && wkt.DATUM.SPHEROID) {\n          wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;\n        }\n      } else {\n        wkt.to_meter = wkt.UNIT.convert;\n      }\n    }\n  }\n  var geogcs = wkt.GEOGCS;\n  if (wkt.type === 'GEOGCS') {\n    geogcs = wkt;\n  }\n  if (geogcs) {\n    //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\n    //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\n    //}\n    if (geogcs.DATUM) {\n      wkt.datumCode = geogcs.DATUM.name.toLowerCase();\n    } else {\n      wkt.datumCode = geogcs.name.toLowerCase();\n    }\n    if (wkt.datumCode.slice(0, 2) === 'd_') {\n      wkt.datumCode = wkt.datumCode.slice(2);\n    }\n    if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {\n      wkt.datumCode = 'nzgd49';\n    }\n    if (wkt.datumCode === 'wgs_1984') {\n      if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\n        wkt.sphere = true;\n      }\n      wkt.datumCode = 'wgs84';\n    }\n    if (wkt.datumCode.slice(-6) === '_ferro') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 6);\n    }\n    if (wkt.datumCode.slice(-8) === '_jakarta') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 8);\n    }\n    if (~wkt.datumCode.indexOf('belge')) {\n      wkt.datumCode = 'rnb72';\n    }\n    if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {\n      wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\n      if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {\n        wkt.ellps = 'intl';\n      }\n\n      wkt.a = geogcs.DATUM.SPHEROID.a;\n      wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);\n    }\n\n    if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {\n      wkt.datum_params = geogcs.DATUM.TOWGS84;\n    }\n    if (~wkt.datumCode.indexOf('osgb_1936')) {\n      wkt.datumCode = 'osgb36';\n    }\n    if (~wkt.datumCode.indexOf('osni_1952')) {\n      wkt.datumCode = 'osni52';\n    }\n    if (~wkt.datumCode.indexOf('tm65')\n      || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {\n      wkt.datumCode = 'ire65';\n    }\n    if (wkt.datumCode === 'ch1903+') {\n      wkt.datumCode = 'ch1903';\n    }\n    if (~wkt.datumCode.indexOf('israel')) {\n      wkt.datumCode = 'isr93';\n    }\n  }\n  if (wkt.b && !isFinite(wkt.b)) {\n    wkt.b = wkt.a;\n  }\n\n  function toMeter(input) {\n    var ratio = wkt.to_meter || 1;\n    return input * ratio;\n  }\n  var renamer = function(a) {\n    return rename(wkt, a);\n  };\n  var list = [\n    ['standard_parallel_1', 'Standard_Parallel_1'],\n    ['standard_parallel_2', 'Standard_Parallel_2'],\n    ['false_easting', 'False_Easting'],\n    ['false_northing', 'False_Northing'],\n    ['central_meridian', 'Central_Meridian'],\n    ['latitude_of_origin', 'Latitude_Of_Origin'],\n    ['latitude_of_origin', 'Central_Parallel'],\n    ['scale_factor', 'Scale_Factor'],\n    ['k0', 'scale_factor'],\n    ['latitude_of_center', 'Latitude_Of_Center'],\n    ['latitude_of_center', 'Latitude_of_center'],\n    ['lat0', 'latitude_of_center', d2r],\n    ['longitude_of_center', 'Longitude_Of_Center'],\n    ['longitude_of_center', 'Longitude_of_center'],\n    ['longc', 'longitude_of_center', d2r],\n    ['x0', 'false_easting', toMeter],\n    ['y0', 'false_northing', toMeter],\n    ['long0', 'central_meridian', d2r],\n    ['lat0', 'latitude_of_origin', d2r],\n    ['lat0', 'standard_parallel_1', d2r],\n    ['lat1', 'standard_parallel_1', d2r],\n    ['lat2', 'standard_parallel_2', d2r],\n    ['azimuth', 'Azimuth'],\n    ['alpha', 'azimuth', d2r],\n    ['srsCode', 'name']\n  ];\n  list.forEach(renamer);\n  if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {\n    wkt.long0 = wkt.longc;\n  }\n  if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\n    wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\n    wkt.lat_ts = wkt.lat1;\n  }\n}\nexport default function(wkt) {\n  var lisp = parser(wkt);\n  var type = lisp.shift();\n  var name = lisp.shift();\n  lisp.unshift(['name', name]);\n  lisp.unshift(['type', type]);\n  var obj = {};\n  sExpr(lisp, obj);\n  cleanWKT(obj);\n  return obj;\n}\n","import globals from './global';\nimport parseProj from './projString';\nimport wkt from 'wkt-parser';\n\nfunction defs(name) {\n  /*global console*/\n  var that = this;\n  if (arguments.length === 2) {\n    var def = arguments[1];\n    if (typeof def === 'string') {\n      if (def.charAt(0) === '+') {\n        defs[name] = parseProj(arguments[1]);\n      }\n      else {\n        defs[name] = wkt(arguments[1]);\n      }\n    } else {\n      defs[name] = def;\n    }\n  }\n  else if (arguments.length === 1) {\n    if (Array.isArray(name)) {\n      return name.map(function(v) {\n        if (Array.isArray(v)) {\n          defs.apply(that, v);\n        }\n        else {\n          defs(v);\n        }\n      });\n    }\n    else if (typeof name === 'string') {\n      if (name in defs) {\n        return defs[name];\n      }\n    }\n    else if ('EPSG' in name) {\n      defs['EPSG:' + name.EPSG] = name;\n    }\n    else if ('ESRI' in name) {\n      defs['ESRI:' + name.ESRI] = name;\n    }\n    else if ('IAU2000' in name) {\n      defs['IAU2000:' + name.IAU2000] = name;\n    }\n    else {\n      console.log(name);\n    }\n    return;\n  }\n\n\n}\nglobals(defs);\nexport default defs;\n","import defs from './defs';\nimport wkt from 'wkt-parser';\nimport projStr from './projString';\nimport match from './match';\nfunction testObj(code){\n  return typeof code === 'string';\n}\nfunction testDef(code){\n  return code in defs;\n}\n var codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\nfunction testWKT(code){\n  return codeWords.some(function (word) {\n    return code.indexOf(word) > -1;\n  });\n}\nvar codes = ['3857', '900913', '3785', '102113'];\nfunction checkMercator(item) {\n  var auth = match(item, 'authority');\n  if (!auth) {\n    return;\n  }\n  var code = match(auth, 'epsg');\n  return code && codes.indexOf(code) > -1;\n}\nfunction checkProjStr(item) {\n  var ext = match(item, 'extension');\n  if (!ext) {\n    return;\n  }\n  return match(ext, 'proj4');\n}\nfunction testProj(code){\n  return code[0] === '+';\n}\nfunction parse(code){\n  if (testObj(code)) {\n    //check to see if this is a WKT string\n    if (testDef(code)) {\n      return defs[code];\n    }\n    if (testWKT(code)) {\n      var out = wkt(code);\n      // test of spetial case, due to this being a very common and often malformed\n      if (checkMercator(out)) {\n        return defs['EPSG:3857'];\n      }\n      var maybeProjStr = checkProjStr(out);\n      if (maybeProjStr) {\n        return projStr(maybeProjStr);\n      }\n      return out;\n    }\n    if (testProj(code)) {\n      return projStr(code);\n    }\n  }else{\n    return code;\n  }\n}\n\nexport default parse;\n","export default function(destination, source) {\n  destination = destination || {};\n  var value, property;\n  if (!source) {\n    return destination;\n  }\n  for (property in source) {\n    value = source[property];\n    if (value !== undefined) {\n      destination[property] = value;\n    }\n  }\n  return destination;\n}\n","export default function(eccent, sinphi, cosphi) {\n  var con = eccent * sinphi;\n  return cosphi / (Math.sqrt(1 - con * con));\n}","export default function(x) {\n  return x<0 ? -1 : 1;\n}","\nimport {TWO_PI, SPI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));\n}\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, phi, sinphi) {\n  var con = eccent * sinphi;\n  var com = 0.5 * eccent;\n  con = Math.pow(((1 - con) / (1 + con)), com);\n  return (Math.tan(0.5 * (HALF_PI - phi)) / con);\n}\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, ts) {\n  var eccnth = 0.5 * eccent;\n  var con, dphi;\n  var phi = HALF_PI - 2 * Math.atan(ts);\n  for (var i = 0; i <= 15; i++) {\n    con = eccent * Math.sin(phi);\n    dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n  //console.log(\"phi2z has NoConvergence\");\n  return -9999;\n}\n","import msfnz from '../common/msfnz';\n\nimport adjust_lon from '../common/adjust_lon';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport {FORTPI, R2D, EPSLN, HALF_PI} from '../constants/values';\nexport function init() {\n  var con = this.b / this.a;\n  this.es = 1 - con * con;\n  if(!('x0' in this)){\n    this.x0 = 0;\n  }\n  if(!('y0' in this)){\n    this.y0 = 0;\n  }\n  this.e = Math.sqrt(this.es);\n  if (this.lat_ts) {\n    if (this.sphere) {\n      this.k0 = Math.cos(this.lat_ts);\n    }\n    else {\n      this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n    }\n  }\n  else {\n    if (!this.k0) {\n      if (this.k) {\n        this.k0 = this.k;\n      }\n      else {\n        this.k0 = 1;\n      }\n    }\n  }\n}\n\n/* Mercator forward equations--mapping lat,long to x,y\n  --------------------------------------------------*/\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  // convert to radians\n  if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {\n    return null;\n  }\n\n  var x, y;\n  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n    return null;\n  }\n  else {\n    if (this.sphere) {\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));\n    }\n    else {\n      var sinphi = Math.sin(lat);\n      var ts = tsfnz(this.e, lat, sinphi);\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 - this.a * this.k0 * Math.log(ts);\n    }\n    p.x = x;\n    p.y = y;\n    return p;\n  }\n}\n\n/* Mercator inverse equations--mapping x,y to lat/long\n  --------------------------------------------------*/\nexport function inverse(p) {\n\n  var x = p.x - this.x0;\n  var y = p.y - this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));\n  }\n  else {\n    var ts = Math.exp(-y / (this.a * this.k0));\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  lon = adjust_lon(this.long0 + x / (this.a * this.k0));\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mercator\", \"Popular Visualisation Pseudo Mercator\", \"Mercator_1SP\", \"Mercator_Auxiliary_Sphere\", \"merc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export function init() {\n  //no-op for longlat\n}\n\nfunction identity(pt) {\n  return pt;\n}\nexport {identity as forward};\nexport {identity as inverse};\nexport var names = [\"longlat\", \"identity\"];\nexport default {\n  init: init,\n  forward: identity,\n  inverse: identity,\n  names: names\n};\n","import merc from \"./projections/merc\";\nimport longlat from \"./projections/longlat\";\nvar projs = [merc, longlat];\nvar names = {};\nvar projStore = [];\n\nfunction add(proj, i) {\n  var len = projStore.length;\n  if (!proj.names) {\n    console.log(i);\n    return true;\n  }\n  projStore[len] = proj;\n  proj.names.forEach(function(n) {\n    names[n.toLowerCase()] = len;\n  });\n  return this;\n}\n\nexport {add};\n\nexport function get(name) {\n  if (!name) {\n    return false;\n  }\n  var n = name.toLowerCase();\n  if (typeof names[n] !== 'undefined' && projStore[names[n]]) {\n    return projStore[names[n]];\n  }\n}\n\nexport function start() {\n  projs.forEach(add);\n}\nexport default {\n  start: start,\n  add: add,\n  get: get\n};\n","var exports = {};\nexport {exports as default};\nexports.MERIT = {\n  a: 6378137.0,\n  rf: 298.257,\n  ellipseName: \"MERIT 1983\"\n};\n\nexports.SGS85 = {\n  a: 6378136.0,\n  rf: 298.257,\n  ellipseName: \"Soviet Geodetic System 85\"\n};\n\nexports.GRS80 = {\n  a: 6378137.0,\n  rf: 298.257222101,\n  ellipseName: \"GRS 1980(IUGG, 1980)\"\n};\n\nexports.IAU76 = {\n  a: 6378140.0,\n  rf: 298.257,\n  ellipseName: \"IAU 1976\"\n};\n\nexports.airy = {\n  a: 6377563.396,\n  b: 6356256.910,\n  ellipseName: \"Airy 1830\"\n};\n\nexports.APL4 = {\n  a: 6378137,\n  rf: 298.25,\n  ellipseName: \"Appl. Physics. 1965\"\n};\n\nexports.NWL9D = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"Naval Weapons Lab., 1965\"\n};\n\nexports.mod_airy = {\n  a: 6377340.189,\n  b: 6356034.446,\n  ellipseName: \"Modified Airy\"\n};\n\nexports.andrae = {\n  a: 6377104.43,\n  rf: 300.0,\n  ellipseName: \"Andrae 1876 (Den., Iclnd.)\"\n};\n\nexports.aust_SA = {\n  a: 6378160.0,\n  rf: 298.25,\n  ellipseName: \"Australian Natl & S. Amer. 1969\"\n};\n\nexports.GRS67 = {\n  a: 6378160.0,\n  rf: 298.2471674270,\n  ellipseName: \"GRS 67(IUGG 1967)\"\n};\n\nexports.bessel = {\n  a: 6377397.155,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841\"\n};\n\nexports.bess_nam = {\n  a: 6377483.865,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841 (Namibia)\"\n};\n\nexports.clrk66 = {\n  a: 6378206.4,\n  b: 6356583.8,\n  ellipseName: \"Clarke 1866\"\n};\n\nexports.clrk80 = {\n  a: 6378249.145,\n  rf: 293.4663,\n  ellipseName: \"Clarke 1880 mod.\"\n};\n\nexports.clrk58 = {\n  a: 6378293.645208759,\n  rf: 294.2606763692654,\n  ellipseName: \"Clarke 1858\"\n};\n\nexports.CPM = {\n  a: 6375738.7,\n  rf: 334.29,\n  ellipseName: \"Comm. des Poids et Mesures 1799\"\n};\n\nexports.delmbr = {\n  a: 6376428.0,\n  rf: 311.5,\n  ellipseName: \"Delambre 1810 (Belgium)\"\n};\n\nexports.engelis = {\n  a: 6378136.05,\n  rf: 298.2566,\n  ellipseName: \"Engelis 1985\"\n};\n\nexports.evrst30 = {\n  a: 6377276.345,\n  rf: 300.8017,\n  ellipseName: \"Everest 1830\"\n};\n\nexports.evrst48 = {\n  a: 6377304.063,\n  rf: 300.8017,\n  ellipseName: \"Everest 1948\"\n};\n\nexports.evrst56 = {\n  a: 6377301.243,\n  rf: 300.8017,\n  ellipseName: \"Everest 1956\"\n};\n\nexports.evrst69 = {\n  a: 6377295.664,\n  rf: 300.8017,\n  ellipseName: \"Everest 1969\"\n};\n\nexports.evrstSS = {\n  a: 6377298.556,\n  rf: 300.8017,\n  ellipseName: \"Everest (Sabah & Sarawak)\"\n};\n\nexports.fschr60 = {\n  a: 6378166.0,\n  rf: 298.3,\n  ellipseName: \"Fischer (Mercury Datum) 1960\"\n};\n\nexports.fschr60m = {\n  a: 6378155.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1960\"\n};\n\nexports.fschr68 = {\n  a: 6378150.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1968\"\n};\n\nexports.helmert = {\n  a: 6378200.0,\n  rf: 298.3,\n  ellipseName: \"Helmert 1906\"\n};\n\nexports.hough = {\n  a: 6378270.0,\n  rf: 297.0,\n  ellipseName: \"Hough\"\n};\n\nexports.intl = {\n  a: 6378388.0,\n  rf: 297.0,\n  ellipseName: \"International 1909 (Hayford)\"\n};\n\nexports.kaula = {\n  a: 6378163.0,\n  rf: 298.24,\n  ellipseName: \"Kaula 1961\"\n};\n\nexports.lerch = {\n  a: 6378139.0,\n  rf: 298.257,\n  ellipseName: \"Lerch 1979\"\n};\n\nexports.mprts = {\n  a: 6397300.0,\n  rf: 191.0,\n  ellipseName: \"Maupertius 1738\"\n};\n\nexports.new_intl = {\n  a: 6378157.5,\n  b: 6356772.2,\n  ellipseName: \"New International 1967\"\n};\n\nexports.plessis = {\n  a: 6376523.0,\n  rf: 6355863.0,\n  ellipseName: \"Plessis 1817 (France)\"\n};\n\nexports.krass = {\n  a: 6378245.0,\n  rf: 298.3,\n  ellipseName: \"Krassovsky, 1942\"\n};\n\nexports.SEasia = {\n  a: 6378155.0,\n  b: 6356773.3205,\n  ellipseName: \"Southeast Asia\"\n};\n\nexports.walbeck = {\n  a: 6376896.0,\n  b: 6355834.8467,\n  ellipseName: \"Walbeck\"\n};\n\nexports.WGS60 = {\n  a: 6378165.0,\n  rf: 298.3,\n  ellipseName: \"WGS 60\"\n};\n\nexports.WGS66 = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"WGS 66\"\n};\n\nexports.WGS7 = {\n  a: 6378135.0,\n  rf: 298.26,\n  ellipseName: \"WGS 72\"\n};\n\nexport var WGS84 = exports.WGS84 = {\n  a: 6378137.0,\n  rf: 298.257223563,\n  ellipseName: \"WGS 84\"\n};\n\nexports.sphere = {\n  a: 6370997.0,\n  b: 6370997.0,\n  ellipseName: \"Normal Sphere (r=6370997)\"\n};\n","import {SIXTH, RA4, RA6, EPSLN} from './constants/values';\nimport {default as Ellipsoid, WGS84} from './constants/Ellipsoid';\nimport match from './match';\n\nexport function eccentricity(a, b, rf, R_A) {\n  var a2 = a * a; // used in geocentric\n  var b2 = b * b; // used in geocentric\n  var es = (a2 - b2) / a2; // e ^ 2\n  var e = 0;\n  if (R_A) {\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n    a2 = a * a;\n    es = 0;\n  } else {\n    e = Math.sqrt(es); // eccentricity\n  }\n  var ep2 = (a2 - b2) / b2; // used in geocentric\n  return {\n    es: es,\n    e: e,\n    ep2: ep2\n  };\n}\nexport function sphere(a, b, rf, ellps, sphere) {\n  if (!a) { // do we have an ellipsoid?\n    var ellipse = match(Ellipsoid, ellps);\n    if (!ellipse) {\n      ellipse = WGS84;\n    }\n    a = ellipse.a;\n    b = ellipse.b;\n    rf = ellipse.rf;\n  }\n\n  if (rf && !b) {\n    b = (1.0 - 1.0 / rf) * a;\n  }\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n    sphere = true;\n    b = a;\n  }\n  return {\n    a: a,\n    b: b,\n    rf: rf,\n    sphere: sphere\n  };\n}\n","var exports = {};\nexport {exports as default};\nexports.wgs84 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"WGS84\",\n  datumName: \"WGS84\"\n};\n\nexports.ch1903 = {\n  towgs84: \"674.374,15.056,405.346\",\n  ellipse: \"bessel\",\n  datumName: \"swiss\"\n};\n\nexports.ggrs87 = {\n  towgs84: \"-199.87,74.79,246.62\",\n  ellipse: \"GRS80\",\n  datumName: \"Greek_Geodetic_Reference_System_1987\"\n};\n\nexports.nad83 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"GRS80\",\n  datumName: \"North_American_Datum_1983\"\n};\n\nexports.nad27 = {\n  nadgrids: \"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat\",\n  ellipse: \"clrk66\",\n  datumName: \"North_American_Datum_1927\"\n};\n\nexports.potsdam = {\n  towgs84: \"606.0,23.0,413.0\",\n  ellipse: \"bessel\",\n  datumName: \"Potsdam Rauenberg 1950 DHDN\"\n};\n\nexports.carthage = {\n  towgs84: \"-263.0,6.0,431.0\",\n  ellipse: \"clark80\",\n  datumName: \"Carthage 1934 Tunisia\"\n};\n\nexports.hermannskogel = {\n  towgs84: \"653.0,-212.0,449.0\",\n  ellipse: \"bessel\",\n  datumName: \"Hermannskogel\"\n};\n\nexports.osni52 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"airy\",\n  datumName: \"Irish National\"\n};\n\nexports.ire65 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"mod_airy\",\n  datumName: \"Ireland 1965\"\n};\n\nexports.rassadiran = {\n  towgs84: \"-133.63,-157.5,-158.62\",\n  ellipse: \"intl\",\n  datumName: \"Rassadiran\"\n};\n\nexports.nzgd49 = {\n  towgs84: \"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993\",\n  ellipse: \"intl\",\n  datumName: \"New Zealand Geodetic Datum 1949\"\n};\n\nexports.osgb36 = {\n  towgs84: \"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894\",\n  ellipse: \"airy\",\n  datumName: \"Airy 1830\"\n};\n\nexports.s_jtsk = {\n  towgs84: \"589,76,480\",\n  ellipse: 'bessel',\n  datumName: 'S-JTSK (Ferro)'\n};\n\nexports.beduaram = {\n  towgs84: '-106,-87,188',\n  ellipse: 'clrk80',\n  datumName: 'Beduaram'\n};\n\nexports.gunung_segara = {\n  towgs84: '-403,684,41',\n  ellipse: 'bessel',\n  datumName: 'Gunung Segara Jakarta'\n};\n\nexports.rnb72 = {\n  towgs84: \"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1\",\n  ellipse: \"intl\",\n  datumName: \"Reseau National Belge 1972\"\n};\n","import {PJD_3PARAM, PJD_7PARAM, PJD_WGS84, PJD_NODATUM, SEC_TO_RAD} from './constants/values';\n\nfunction datum(datumCode, datum_params, a, b, es, ep2) {\n  var out = {};\n\n  if (datumCode === undefined || datumCode === 'none') {\n    out.datum_type = PJD_NODATUM;\n  } else {\n    out.datum_type = PJD_WGS84;\n  }\n\n  if (datum_params) {\n    out.datum_params = datum_params.map(parseFloat);\n    if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {\n      out.datum_type = PJD_3PARAM;\n    }\n    if (out.datum_params.length > 3) {\n      if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {\n        out.datum_type = PJD_7PARAM;\n        out.datum_params[3] *= SEC_TO_RAD;\n        out.datum_params[4] *= SEC_TO_RAD;\n        out.datum_params[5] *= SEC_TO_RAD;\n        out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;\n      }\n    }\n  }\n\n  out.a = a; //datum object also uses these values\n  out.b = b;\n  out.es = es;\n  out.ep2 = ep2;\n  return out;\n}\n\nexport default datum;\n","import parseCode from './parseCode';\nimport extend from './extend';\nimport projections from './projections';\nimport {sphere as dc_sphere, eccentricity as dc_eccentricity} from './deriveConstants';\nimport Datum from './constants/Datum';\nimport datum from './datum';\nimport match from './match';\n\nfunction Projection(srsCode,callback) {\n  if (!(this instanceof Projection)) {\n    return new Projection(srsCode);\n  }\n  callback = callback || function(error){\n    if(error){\n      throw error;\n    }\n  };\n  var json = parseCode(srsCode);\n  if(typeof json !== 'object'){\n    callback(srsCode);\n    return;\n  }\n  var ourProj = Projection.projections.get(json.projName);\n  if(!ourProj){\n    callback(srsCode);\n    return;\n  }\n  if (json.datumCode && json.datumCode !== 'none') {\n    var datumDef = match(Datum, json.datumCode);\n    if (datumDef) {\n      json.datum_params = datumDef.towgs84 ? datumDef.towgs84.split(',') : null;\n      json.ellps = datumDef.ellipse;\n      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n    }\n  }\n  json.k0 = json.k0 || 1.0;\n  json.axis = json.axis || 'enu';\n  json.ellps = json.ellps || 'wgs84';\n  var sphere_ = dc_sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n  var ecc = dc_eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2);\n\n  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n  extend(this, ourProj); // transfer all the methods from the projection\n\n  // copy the 4 things over we calulated in deriveConstants.sphere\n  this.a = sphere_.a;\n  this.b = sphere_.b;\n  this.rf = sphere_.rf;\n  this.sphere = sphere_.sphere;\n\n  // copy the 3 things we calculated in deriveConstants.eccentricity\n  this.es = ecc.es;\n  this.e = ecc.e;\n  this.ep2 = ecc.ep2;\n\n  // add in the datum object\n  this.datum = datumObj;\n\n  // init the projection\n  this.init();\n\n  // legecy callback from back in the day when it went to spatialreference.org\n  callback(null, this);\n\n}\nProjection.projections = projections;\nProjection.projections.start();\nexport default Projection;\n","'use strict';\nimport {PJD_3PARAM, PJD_7PARAM, HALF_PI} from './constants/values';\nexport function compareDatums(source, dest) {\n  if (source.datum_type !== dest.datum_type) {\n    return false; // false, datums are not equal\n  } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {\n    // the tolerance for es is to ensure that GRS80 and WGS84\n    // are considered identical\n    return false;\n  } else if (source.datum_type === PJD_3PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);\n  } else if (source.datum_type === PJD_7PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);\n  } else {\n    return true; // datums are equal\n  }\n} // cs_compare_datums()\n\n/*\n * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\n * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\n * according to the current ellipsoid parameters.\n *\n *    Latitude  : Geodetic latitude in radians                     (input)\n *    Longitude : Geodetic longitude in radians                    (input)\n *    Height    : Geodetic height, in meters                       (input)\n *    X         : Calculated Geocentric X coordinate, in meters    (output)\n *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\n *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\n *\n */\nexport function geodeticToGeocentric(p, es, a) {\n  var Longitude = p.x;\n  var Latitude = p.y;\n  var Height = p.z ? p.z : 0; //Z value not always supplied\n\n  var Rn; /*  Earth radius at location  */\n  var Sin_Lat; /*  Math.sin(Latitude)  */\n  var Sin2_Lat; /*  Square of Math.sin(Latitude)  */\n  var Cos_Lat; /*  Math.cos(Latitude)  */\n\n  /*\n   ** Don't blow up if Latitude is just a little out of the value\n   ** range as it may just be a rounding issue.  Also removed longitude\n   ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\n   */\n  if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\n    Latitude = -HALF_PI;\n  } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\n    Latitude = HALF_PI;\n  } else if (Latitude < -HALF_PI) {\n    /* Latitude out of range */\n    //..reportError('geocent:lat out of range:' + Latitude);\n    return { x: -Infinity, y: -Infinity, z: p.z };\n  } else if (Latitude > HALF_PI) {\n    /* Latitude out of range */\n    return { x: Infinity, y: Infinity, z: p.z };\n  }\n\n  if (Longitude > Math.PI) {\n    Longitude -= (2 * Math.PI);\n  }\n  Sin_Lat = Math.sin(Latitude);\n  Cos_Lat = Math.cos(Latitude);\n  Sin2_Lat = Sin_Lat * Sin_Lat;\n  Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));\n  return {\n    x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),\n    y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),\n    z: ((Rn * (1 - es)) + Height) * Sin_Lat\n  };\n} // cs_geodetic_to_geocentric()\n\nexport function geocentricToGeodetic(p, es, a, b) {\n  /* local defintions and variables */\n  /* end-criterium of loop, accuracy of sin(Latitude) */\n  var genau = 1e-12;\n  var genau2 = (genau * genau);\n  var maxiter = 30;\n\n  var P; /* distance between semi-minor axis and location */\n  var RR; /* distance between center and location */\n  var CT; /* sin of geocentric latitude */\n  var ST; /* cos of geocentric latitude */\n  var RX;\n  var RK;\n  var RN; /* Earth radius at location */\n  var CPHI0; /* cos of start or old geodetic latitude in iterations */\n  var SPHI0; /* sin of start or old geodetic latitude in iterations */\n  var CPHI; /* cos of searched geodetic latitude */\n  var SPHI; /* sin of searched geodetic latitude */\n  var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\n  var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */\n\n  var X = p.x;\n  var Y = p.y;\n  var Z = p.z ? p.z : 0.0; //Z value not always supplied\n  var Longitude;\n  var Latitude;\n  var Height;\n\n  P = Math.sqrt(X * X + Y * Y);\n  RR = Math.sqrt(X * X + Y * Y + Z * Z);\n\n  /*      special cases for latitude and longitude */\n  if (P / a < genau) {\n\n    /*  special case, if P=0. (X=0., Y=0.) */\n    Longitude = 0.0;\n\n    /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\n     *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\n    if (RR / a < genau) {\n      Latitude = HALF_PI;\n      Height = -b;\n      return {\n        x: p.x,\n        y: p.y,\n        z: p.z\n      };\n    }\n  } else {\n    /*  ellipsoidal (geodetic) longitude\n     *  interval: -PI < Longitude <= +PI */\n    Longitude = Math.atan2(Y, X);\n  }\n\n  /* --------------------------------------------------------------\n   * Following iterative algorithm was developped by\n   * \"Institut for Erdmessung\", University of Hannover, July 1988.\n   * Internet: www.ife.uni-hannover.de\n   * Iterative computation of CPHI,SPHI and Height.\n   * Iteration of CPHI and SPHI to 10**-12 radian resp.\n   * 2*10**-7 arcsec.\n   * --------------------------------------------------------------\n   */\n  CT = Z / RR;\n  ST = P / RR;\n  RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);\n  CPHI0 = ST * (1.0 - es) * RX;\n  SPHI0 = CT * RX;\n  iter = 0;\n\n  /* loop to find sin(Latitude) resp. Latitude\n   * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\n  do {\n    iter++;\n    RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);\n\n    /*  ellipsoidal (geodetic) height */\n    Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);\n\n    RK = es * RN / (RN + Height);\n    RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\n    CPHI = ST * (1.0 - RK) * RX;\n    SPHI = CT * RX;\n    SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\n    CPHI0 = CPHI;\n    SPHI0 = SPHI;\n  }\n  while (SDPHI * SDPHI > genau2 && iter < maxiter);\n\n  /*      ellipsoidal (geodetic) latitude */\n  Latitude = Math.atan(SPHI / Math.abs(CPHI));\n  return {\n    x: Longitude,\n    y: Latitude,\n    z: Height\n  };\n} // cs_geocentric_to_geodetic()\n\n/****************************************************************/\n// pj_geocentic_to_wgs84( p )\n//  p = point to transform in geocentric coordinates (x,y,z)\n\n\n/** point object, nothing fancy, just allows values to be\n    passed back and forth by reference rather than by value.\n    Other point classes may be used as long as they have\n    x and y properties, which will get modified in the transform method.\n*/\nexport function geocentricToWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x + datum_params[0],\n      y: p.y + datum_params[1],\n      z: p.z + datum_params[2],\n    };\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,\n      y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,\n      z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF\n    };\n  }\n} // cs_geocentric_to_wgs84\n\n/****************************************************************/\n// pj_geocentic_from_wgs84()\n//  coordinate system definition,\n//  point to transform in geocentric coordinates (x,y,z)\nexport function geocentricFromWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x - datum_params[0],\n      y: p.y - datum_params[1],\n      z: p.z - datum_params[2],\n    };\n\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    var x_tmp = (p.x - Dx_BF) / M_BF;\n    var y_tmp = (p.y - Dy_BF) / M_BF;\n    var z_tmp = (p.z - Dz_BF) / M_BF;\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n\n    return {\n      x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,\n      y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,\n      z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp\n    };\n  } //cs_geocentric_from_wgs84()\n}\n","import {PJD_3PARAM, PJD_7PARAM, PJD_NODATUM} from './constants/values';\n\nimport {geodeticToGeocentric, geocentricToGeodetic, geocentricToWgs84, geocentricFromWgs84, compareDatums} from './datumUtils';\nfunction checkParams(type) {\n  return (type === PJD_3PARAM || type === PJD_7PARAM);\n}\n\nexport default function(source, dest, point) {\n  // Short cut if the datums are identical.\n  if (compareDatums(source, dest)) {\n    return point; // in this case, zero is sucess,\n    // whereas cs_compare_datums returns 1 to indicate TRUE\n    // confusing, should fix this\n  }\n\n  // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n    return point;\n  }\n\n  // If this datum requires grid shifts, then apply it to geodetic coordinates.\n\n  // Do we need to go through geocentric coordinates?\n  if (source.es === dest.es && source.a === dest.a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {\n    return point;\n  }\n\n  // Convert to geocentric coordinates.\n  point = geodeticToGeocentric(point, source.es, source.a);\n  // Convert between datums\n  if (checkParams(source.datum_type)) {\n    point = geocentricToWgs84(point, source.datum_type, source.datum_params);\n  }\n  if (checkParams(dest.datum_type)) {\n    point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\n  }\n  return geocentricToGeodetic(point, dest.es, dest.a, dest.b);\n\n}\n","export default function(crs, denorm, point) {\n  var xin = point.x,\n    yin = point.y,\n    zin = point.z || 0.0;\n  var v, t, i;\n  var out = {};\n  for (i = 0; i < 3; i++) {\n    if (denorm && i === 2 && point.z === undefined) {\n      continue;\n    }\n    if (i === 0) {\n      v = xin;\n      t = 'x';\n    }\n    else if (i === 1) {\n      v = yin;\n      t = 'y';\n    }\n    else {\n      v = zin;\n      t = 'z';\n    }\n    switch (crs.axis[i]) {\n    case 'e':\n      out[t] = v;\n      break;\n    case 'w':\n      out[t] = -v;\n      break;\n    case 'n':\n      out[t] = v;\n      break;\n    case 's':\n      out[t] = -v;\n      break;\n    case 'u':\n      if (point[t] !== undefined) {\n        out.z = v;\n      }\n      break;\n    case 'd':\n      if (point[t] !== undefined) {\n        out.z = -v;\n      }\n      break;\n    default:\n      //console.log(\"ERROR: unknow axis (\"+crs.axis[i]+\") - check definition of \"+crs.projName);\n      return null;\n    }\n  }\n  return out;\n}\n","export default function (array){\n  var out = {\n    x: array[0],\n    y: array[1]\n  };\n  if (array.length>2) {\n    out.z = array[2];\n  }\n  if (array.length>3) {\n    out.m = array[3];\n  }\n  return out;\n}","export default function (point) {\n  checkCoord(point.x);\n  checkCoord(point.y);\n}\nfunction checkCoord(num) {\n  if (typeof Number.isFinite === 'function') {\n    if (Number.isFinite(num)) {\n      return;\n    }\n    throw new TypeError('coordinates must be finite numbers');\n  }\n  if (typeof num !== 'number' || num !== num || !isFinite(num)) {\n    throw new TypeError('coordinates must be finite numbers');\n  }\n}\n","import {D2R, R2D, PJD_3PARAM, PJD_7PARAM} from './constants/values';\nimport datum_transform from './datum_transform';\nimport adjust_axis from './adjust_axis';\nimport proj from './Proj';\nimport toPoint from './common/toPoint';\nimport checkSanity from './checkSanity';\n\nfunction checkNotWGS(source, dest) {\n  return ((source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM) && dest.datumCode !== 'WGS84') || ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM) && source.datumCode !== 'WGS84');\n}\n\nexport default function transform(source, dest, point) {\n  var wgs84;\n  if (Array.isArray(point)) {\n    point = toPoint(point);\n  }\n  checkSanity(point);\n  // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84\n  if (source.datum && dest.datum && checkNotWGS(source, dest)) {\n    wgs84 = new proj('WGS84');\n    point = transform(source, wgs84, point);\n    source = wgs84;\n  }\n  // DGR, 2010/11/12\n  if (source.axis !== 'enu') {\n    point = adjust_axis(source, false, point);\n  }\n  // Transform source points to long/lat, if they aren't already.\n  if (source.projName === 'longlat') {\n    point = {\n      x: point.x * D2R,\n      y: point.y * D2R\n    };\n  }\n  else {\n    if (source.to_meter) {\n      point = {\n        x: point.x * source.to_meter,\n        y: point.y * source.to_meter\n      };\n    }\n    point = source.inverse(point); // Convert Cartesian to longlat\n  }\n  // Adjust for the prime meridian if necessary\n  if (source.from_greenwich) {\n    point.x += source.from_greenwich;\n  }\n\n  // Convert datums if needed, and if possible.\n  point = datum_transform(source.datum, dest.datum, point);\n\n  // Adjust for the prime meridian if necessary\n  if (dest.from_greenwich) {\n    point = {\n      x: point.x - dest.from_greenwich,\n      y: point.y\n    };\n  }\n\n  if (dest.projName === 'longlat') {\n    // convert radians to decimal degrees\n    point = {\n      x: point.x * R2D,\n      y: point.y * R2D\n    };\n  } else { // else project\n    point = dest.forward(point);\n    if (dest.to_meter) {\n      point = {\n        x: point.x / dest.to_meter,\n        y: point.y / dest.to_meter\n      };\n    }\n  }\n\n  // DGR, 2010/11/12\n  if (dest.axis !== 'enu') {\n    return adjust_axis(dest, true, point);\n  }\n\n  return point;\n}\n","import proj from './Proj';\nimport transform from './transform';\nvar wgs84 = proj('WGS84');\n\nfunction transformer(from, to, coords) {\n  var transformedArray, out, keys;\n  if (Array.isArray(coords)) {\n    transformedArray = transform(from, to, coords);\n    if (coords.length === 3) {\n      return [transformedArray.x, transformedArray.y, transformedArray.z];\n    }\n    else {\n      return [transformedArray.x, transformedArray.y];\n    }\n  }\n  else {\n    out = transform(from, to, coords);\n    keys = Object.keys(coords);\n    if (keys.length === 2) {\n      return out;\n    }\n    keys.forEach(function (key) {\n      if (key === 'x' || key === 'y') {\n        return;\n      }\n      out[key] = coords[key];\n    });\n    return out;\n  }\n}\n\nfunction checkProj(item) {\n  if (item instanceof proj) {\n    return item;\n  }\n  if (item.oProj) {\n    return item.oProj;\n  }\n  return proj(item);\n}\nfunction proj4(fromProj, toProj, coord) {\n  fromProj = checkProj(fromProj);\n  var single = false;\n  var obj;\n  if (typeof toProj === 'undefined') {\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  }\n  else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {\n    coord = toProj;\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  }\n  toProj = checkProj(toProj);\n  if (coord) {\n    return transformer(fromProj, toProj, coord);\n  }\n  else {\n    obj = {\n      forward: function(coords) {\n        return transformer(fromProj, toProj, coords);\n      },\n      inverse: function(coords) {\n        return transformer(toProj, fromProj, coords);\n      }\n    };\n    if (single) {\n      obj.oProj = toProj;\n    }\n    return obj;\n  }\n}\nexport default proj4;\n","\n\n\n/**\n * UTM zones are grouped, and assigned to one of a group of 6\n * sets.\n *\n * {int} @private\n */\nvar NUM_100K_SETS = 6;\n\n/**\n * The column letters (for easting) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n/**\n * The row letters (for northing) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\nvar A = 65; // A\nvar I = 73; // I\nvar O = 79; // O\nvar V = 86; // V\nvar Z = 90; // Z\nexport default {\n  forward: forward,\n  inverse: inverse,\n  toPoint: toPoint\n};\n/**\n * Conversion of lat/lon to MGRS.\n *\n * @param {object} ll Object literal with lat and lon properties on a\n *     WGS84 ellipsoid.\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n * @return {string} the MGRS string for the given location and accuracy.\n */\nexport function forward(ll, accuracy) {\n  accuracy = accuracy || 5; // default accuracy 1m\n  return encode(LLtoUTM({\n    lat: ll[1],\n    lon: ll[0]\n  }), accuracy);\n};\n\n/**\n * Conversion of MGRS to lat/lon.\n *\n * @param {string} mgrs MGRS string.\n * @return {array} An array with left (longitude), bottom (latitude), right\n *     (longitude) and top (latitude) values in WGS84, representing the\n *     bounding box for the provided MGRS reference.\n */\nexport function inverse(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n  }\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n};\n\nexport function toPoint(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat];\n  }\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n};\n/**\n * Conversion from degrees to radians.\n *\n * @private\n * @param {number} deg the angle in degrees.\n * @return {number} the angle in radians.\n */\nfunction degToRad(deg) {\n  return (deg * (Math.PI / 180.0));\n}\n\n/**\n * Conversion from radians to degrees.\n *\n * @private\n * @param {number} rad the angle in radians.\n * @return {number} the angle in degrees.\n */\nfunction radToDeg(rad) {\n  return (180.0 * (rad / Math.PI));\n}\n\n/**\n * Converts a set of Longitude and Latitude co-ordinates to UTM\n * using the WGS84 ellipsoid.\n *\n * @private\n * @param {object} ll Object literal with lat and lon properties\n *     representing the WGS84 coordinate to be converted.\n * @return {object} Object literal containing the UTM value with easting,\n *     northing, zoneNumber and zoneLetter properties, and an optional\n *     accuracy property in digits. Returns null if the conversion failed.\n */\nfunction LLtoUTM(ll) {\n  var Lat = ll.lat;\n  var Long = ll.lon;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var k0 = 0.9996;\n  var LongOrigin;\n  var eccPrimeSquared;\n  var N, T, C, A, M;\n  var LatRad = degToRad(Lat);\n  var LongRad = degToRad(Long);\n  var LongOriginRad;\n  var ZoneNumber;\n  // (int)\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n  //Make sure the longitude 180.00 is in Zone 60\n  if (Long === 180) {\n    ZoneNumber = 60;\n  }\n\n  // Special zone for Norway\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n    ZoneNumber = 32;\n  }\n\n  // Special zones for Svalbard\n  if (Lat >= 72.0 && Lat < 84.0) {\n    if (Long >= 0.0 && Long < 9.0) {\n      ZoneNumber = 31;\n    }\n    else if (Long >= 9.0 && Long < 21.0) {\n      ZoneNumber = 33;\n    }\n    else if (Long >= 21.0 && Long < 33.0) {\n      ZoneNumber = 35;\n    }\n    else if (Long >= 33.0 && Long < 42.0) {\n      ZoneNumber = 37;\n    }\n  }\n\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n  // in middle of\n  // zone\n  LongOriginRad = degToRad(LongOrigin);\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n  T = Math.tan(LatRad) * Math.tan(LatRad);\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n  if (Lat < 0.0) {\n    UTMNorthing += 10000000.0; //10000000 meter offset for\n    // southern hemisphere\n  }\n\n  return {\n    northing: Math.round(UTMNorthing),\n    easting: Math.round(UTMEasting),\n    zoneNumber: ZoneNumber,\n    zoneLetter: getLetterDesignator(Lat)\n  };\n}\n\n/**\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n * class where the Zone can be specified as a single string eg.\"60N\" which\n * is then broken down into the ZoneNumber and ZoneLetter.\n *\n * @private\n * @param {object} utm An object literal with northing, easting, zoneNumber\n *     and zoneLetter properties. If an optional accuracy property is\n *     provided (in meters), a bounding box will be returned instead of\n *     latitude and longitude.\n * @return {object} An object literal containing either lat and lon values\n *     (if no accuracy was provided), or top, right, bottom and left values\n *     for the bounding box calculated according to the provided accuracy.\n *     Returns null if the conversion failed.\n */\nfunction UTMtoLL(utm) {\n\n  var UTMNorthing = utm.northing;\n  var UTMEasting = utm.easting;\n  var zoneLetter = utm.zoneLetter;\n  var zoneNumber = utm.zoneNumber;\n  // check the ZoneNummber is valid\n  if (zoneNumber < 0 || zoneNumber > 60) {\n    return null;\n  }\n\n  var k0 = 0.9996;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var eccPrimeSquared;\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n  var N1, T1, C1, R1, D, M;\n  var LongOrigin;\n  var mu, phi1Rad;\n\n  // remove 500,000 meter offset for longitude\n  var x = UTMEasting - 500000.0;\n  var y = UTMNorthing;\n\n  // We must know somehow if we are in the Northern or Southern\n  // hemisphere, this is the only time we use the letter So even\n  // if the Zone letter isn't exactly correct it should indicate\n  // the hemisphere correctly\n  if (zoneLetter < 'N') {\n    y -= 10000000.0; // remove 10,000,000 meter offset used\n    // for southern hemisphere\n  }\n\n  // There are 60 zones with zone 1 being at West -180 to -174\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n  // in middle of\n  // zone\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  M = y / k0;\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n  D = x / (N1 * k0);\n\n  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n  lat = radToDeg(lat);\n\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n  lon = LongOrigin + radToDeg(lon);\n\n  var result;\n  if (utm.accuracy) {\n    var topRight = UTMtoLL({\n      northing: utm.northing + utm.accuracy,\n      easting: utm.easting + utm.accuracy,\n      zoneLetter: utm.zoneLetter,\n      zoneNumber: utm.zoneNumber\n    });\n    result = {\n      top: topRight.lat,\n      right: topRight.lon,\n      bottom: lat,\n      left: lon\n    };\n  }\n  else {\n    result = {\n      lat: lat,\n      lon: lon\n    };\n  }\n  return result;\n}\n\n/**\n * Calculates the MGRS letter designator for the given latitude.\n *\n * @private\n * @param {number} lat The latitude in WGS84 to get the letter designator\n *     for.\n * @return {char} The letter designator.\n */\nfunction getLetterDesignator(lat) {\n  //This is here as an error flag to show that the Latitude is\n  //outside MGRS limits\n  var LetterDesignator = 'Z';\n\n  if ((84 >= lat) && (lat >= 72)) {\n    LetterDesignator = 'X';\n  }\n  else if ((72 > lat) && (lat >= 64)) {\n    LetterDesignator = 'W';\n  }\n  else if ((64 > lat) && (lat >= 56)) {\n    LetterDesignator = 'V';\n  }\n  else if ((56 > lat) && (lat >= 48)) {\n    LetterDesignator = 'U';\n  }\n  else if ((48 > lat) && (lat >= 40)) {\n    LetterDesignator = 'T';\n  }\n  else if ((40 > lat) && (lat >= 32)) {\n    LetterDesignator = 'S';\n  }\n  else if ((32 > lat) && (lat >= 24)) {\n    LetterDesignator = 'R';\n  }\n  else if ((24 > lat) && (lat >= 16)) {\n    LetterDesignator = 'Q';\n  }\n  else if ((16 > lat) && (lat >= 8)) {\n    LetterDesignator = 'P';\n  }\n  else if ((8 > lat) && (lat >= 0)) {\n    LetterDesignator = 'N';\n  }\n  else if ((0 > lat) && (lat >= -8)) {\n    LetterDesignator = 'M';\n  }\n  else if ((-8 > lat) && (lat >= -16)) {\n    LetterDesignator = 'L';\n  }\n  else if ((-16 > lat) && (lat >= -24)) {\n    LetterDesignator = 'K';\n  }\n  else if ((-24 > lat) && (lat >= -32)) {\n    LetterDesignator = 'J';\n  }\n  else if ((-32 > lat) && (lat >= -40)) {\n    LetterDesignator = 'H';\n  }\n  else if ((-40 > lat) && (lat >= -48)) {\n    LetterDesignator = 'G';\n  }\n  else if ((-48 > lat) && (lat >= -56)) {\n    LetterDesignator = 'F';\n  }\n  else if ((-56 > lat) && (lat >= -64)) {\n    LetterDesignator = 'E';\n  }\n  else if ((-64 > lat) && (lat >= -72)) {\n    LetterDesignator = 'D';\n  }\n  else if ((-72 > lat) && (lat >= -80)) {\n    LetterDesignator = 'C';\n  }\n  return LetterDesignator;\n}\n\n/**\n * Encodes a UTM location as MGRS string.\n *\n * @private\n * @param {object} utm An object literal with easting, northing,\n *     zoneLetter, zoneNumber\n * @param {number} accuracy Accuracy in digits (1-5).\n * @return {string} MGRS string for the given UTM location.\n */\nfunction encode(utm, accuracy) {\n  // prepend with leading zeroes\n  var seasting = \"00000\" + utm.easting,\n    snorthing = \"00000\" + utm.northing;\n\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n}\n\n/**\n * Get the two letter 100k designator for a given UTM easting,\n * northing and zone number value.\n *\n * @private\n * @param {number} easting\n * @param {number} northing\n * @param {number} zoneNumber\n * @return the two letter 100k designator for the given UTM location.\n */\nfunction get100kID(easting, northing, zoneNumber) {\n  var setParm = get100kSetForZone(zoneNumber);\n  var setColumn = Math.floor(easting / 100000);\n  var setRow = Math.floor(northing / 100000) % 20;\n  return getLetter100kID(setColumn, setRow, setParm);\n}\n\n/**\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\n *\n * @private\n * @param {number} i An UTM zone number.\n * @return {number} the 100k set the UTM zone is in.\n */\nfunction get100kSetForZone(i) {\n  var setParm = i % NUM_100K_SETS;\n  if (setParm === 0) {\n    setParm = NUM_100K_SETS;\n  }\n\n  return setParm;\n}\n\n/**\n * Get the two-letter MGRS 100k designator given information\n * translated from the UTM northing, easting and zone number.\n *\n * @private\n * @param {number} column the column index as it relates to the MGRS\n *        100k set spreadsheet, created from the UTM easting.\n *        Values are 1-8.\n * @param {number} row the row index as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM northing value. Values\n *        are from 0-19.\n * @param {number} parm the set block, as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM zone. Values are from\n *        1-60.\n * @return two letter MGRS 100k code.\n */\nfunction getLetter100kID(column, row, parm) {\n  // colOrigin and rowOrigin are the letters at the origin of the set\n  var index = parm - 1;\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n  // colInt and rowInt are the letters to build to return\n  var colInt = colOrigin + column - 1;\n  var rowInt = rowOrigin + row;\n  var rollover = false;\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n    rollover = true;\n  }\n\n  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n    colInt++;\n  }\n\n  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n    colInt++;\n\n    if (colInt === I) {\n      colInt++;\n    }\n  }\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n    rollover = true;\n  }\n  else {\n    rollover = false;\n  }\n\n  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n    rowInt++;\n  }\n\n  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n    rowInt++;\n\n    if (rowInt === I) {\n      rowInt++;\n    }\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n  }\n\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n  return twoLetter;\n}\n\n/**\n * Decode the UTM parameters from a MGRS string.\n *\n * @private\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n * @return {object} An object literal with easting, northing, zoneLetter,\n *     zoneNumber and accuracy (in meters) properties.\n */\nfunction decode(mgrsString) {\n\n  if (mgrsString && mgrsString.length === 0) {\n    throw (\"MGRSPoint coverting from nothing\");\n  }\n\n  var length = mgrsString.length;\n\n  var hunK = null;\n  var sb = \"\";\n  var testChar;\n  var i = 0;\n\n  // get Zone number\n  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n    if (i >= 2) {\n      throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n    }\n    sb += testChar;\n    i++;\n  }\n\n  var zoneNumber = parseInt(sb, 10);\n\n  if (i === 0 || i + 3 > length) {\n    // A good MGRS string has to be 4-5 digits long,\n    // ##AAA/#AAA at least.\n    throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n  }\n\n  var zoneLetter = mgrsString.charAt(i++);\n\n  // Should we check the zone letter here? Why not.\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n    throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n  }\n\n  hunK = mgrsString.substring(i, i += 2);\n\n  var set = get100kSetForZone(zoneNumber);\n\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\n  var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n  // We have a bug where the northing may be 2000000 too low.\n  // How\n  // do we know when to roll over?\n\n  while (north100k < getMinNorthing(zoneLetter)) {\n    north100k += 2000000;\n  }\n\n  // calculate the char index for easting/northing separator\n  var remainder = length - i;\n\n  if (remainder % 2 !== 0) {\n    throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n  }\n\n  var sep = remainder / 2;\n\n  var sepEasting = 0.0;\n  var sepNorthing = 0.0;\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n  if (sep > 0) {\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\n    sepEastingString = mgrsString.substring(i, i + sep);\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n    sepNorthingString = mgrsString.substring(i + sep);\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n  }\n\n  easting = sepEasting + east100k;\n  northing = sepNorthing + north100k;\n\n  return {\n    easting: easting,\n    northing: northing,\n    zoneLetter: zoneLetter,\n    zoneNumber: zoneNumber,\n    accuracy: accuracyBonus\n  };\n}\n\n/**\n * Given the first letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the easting value that\n * should be added to the other, secondary easting value.\n *\n * @private\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n * @param {number} set The MGRS table set for the zone number.\n * @return {number} The easting value for the given letter and set.\n */\nfunction getEastingFromChar(e, set) {\n  // colOrigin is the letter at the origin of the set for the\n  // column\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n  var eastingValue = 100000.0;\n  var rewindMarker = false;\n\n  while (curCol !== e.charCodeAt(0)) {\n    curCol++;\n    if (curCol === I) {\n      curCol++;\n    }\n    if (curCol === O) {\n      curCol++;\n    }\n    if (curCol > Z) {\n      if (rewindMarker) {\n        throw (\"Bad character: \" + e);\n      }\n      curCol = A;\n      rewindMarker = true;\n    }\n    eastingValue += 100000.0;\n  }\n\n  return eastingValue;\n}\n\n/**\n * Given the second letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the northing value that\n * should be added to the other, secondary northing value. You have to\n * remember that Northings are determined from the equator, and the vertical\n * cycle of letters mean a 2000000 additional northing meters. This happens\n * approx. every 18 degrees of latitude. This method does *NOT* count any\n * additional northings. You have to figure out how many 2000000 meters need\n * to be added for the zone letter of the MGRS coordinate.\n *\n * @private\n * @param {char} n Second letter of the MGRS 100k zone\n * @param {number} set The MGRS table set number, which is dependent on the\n *     UTM zone number.\n * @return {number} The northing value for the given letter and set.\n */\nfunction getNorthingFromChar(n, set) {\n\n  if (n > 'V') {\n    throw (\"MGRSPoint given invalid Northing \" + n);\n  }\n\n  // rowOrigin is the letter at the origin of the set for the\n  // column\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n  var northingValue = 0.0;\n  var rewindMarker = false;\n\n  while (curRow !== n.charCodeAt(0)) {\n    curRow++;\n    if (curRow === I) {\n      curRow++;\n    }\n    if (curRow === O) {\n      curRow++;\n    }\n    // fixing a bug making whole application hang in this loop\n    // when 'n' is a wrong character\n    if (curRow > V) {\n      if (rewindMarker) { // making sure that this loop ends\n        throw (\"Bad character: \" + n);\n      }\n      curRow = A;\n      rewindMarker = true;\n    }\n    northingValue += 100000.0;\n  }\n\n  return northingValue;\n}\n\n/**\n * The function getMinNorthing returns the minimum northing value of a MGRS\n * zone.\n *\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\n *\n * @private\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\n * @return {number}\n */\nfunction getMinNorthing(zoneLetter) {\n  var northing;\n  switch (zoneLetter) {\n  case 'C':\n    northing = 1100000.0;\n    break;\n  case 'D':\n    northing = 2000000.0;\n    break;\n  case 'E':\n    northing = 2800000.0;\n    break;\n  case 'F':\n    northing = 3700000.0;\n    break;\n  case 'G':\n    northing = 4600000.0;\n    break;\n  case 'H':\n    northing = 5500000.0;\n    break;\n  case 'J':\n    northing = 6400000.0;\n    break;\n  case 'K':\n    northing = 7300000.0;\n    break;\n  case 'L':\n    northing = 8200000.0;\n    break;\n  case 'M':\n    northing = 9100000.0;\n    break;\n  case 'N':\n    northing = 0.0;\n    break;\n  case 'P':\n    northing = 800000.0;\n    break;\n  case 'Q':\n    northing = 1700000.0;\n    break;\n  case 'R':\n    northing = 2600000.0;\n    break;\n  case 'S':\n    northing = 3500000.0;\n    break;\n  case 'T':\n    northing = 4400000.0;\n    break;\n  case 'U':\n    northing = 5300000.0;\n    break;\n  case 'V':\n    northing = 6200000.0;\n    break;\n  case 'W':\n    northing = 7000000.0;\n    break;\n  case 'X':\n    northing = 7900000.0;\n    break;\n  default:\n    northing = -1.0;\n  }\n  if (northing >= 0.0) {\n    return northing;\n  }\n  else {\n    throw (\"Invalid zone letter: \" + zoneLetter);\n  }\n\n}\n","import {toPoint, forward} from 'mgrs';\n\nfunction Point(x, y, z) {\n  if (!(this instanceof Point)) {\n    return new Point(x, y, z);\n  }\n  if (Array.isArray(x)) {\n    this.x = x[0];\n    this.y = x[1];\n    this.z = x[2] || 0.0;\n  } else if(typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n    this.z = x.z || 0.0;\n  } else if (typeof x === 'string' && typeof y === 'undefined') {\n    var coords = x.split(',');\n    this.x = parseFloat(coords[0], 10);\n    this.y = parseFloat(coords[1], 10);\n    this.z = parseFloat(coords[2], 10) || 0.0;\n  } else {\n    this.x = x;\n    this.y = y;\n    this.z = z || 0.0;\n  }\n  console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');\n}\n\nPoint.fromMGRS = function(mgrsStr) {\n  return new Point(toPoint(mgrsStr));\n};\nPoint.prototype.toMGRS = function(accuracy) {\n  return forward([this.x, this.y], accuracy);\n};\nexport default Point;\n","var C00 = 1;\nvar C02 = 0.25;\nvar C04 = 0.046875;\nvar C06 = 0.01953125;\nvar C08 = 0.01068115234375;\nvar C22 = 0.75;\nvar C44 = 0.46875;\nvar C46 = 0.01302083333333333333;\nvar C48 = 0.00712076822916666666;\nvar C66 = 0.36458333333333333333;\nvar C68 = 0.00569661458333333333;\nvar C88 = 0.3076171875;\n\nexport default function(es) {\n  var en = [];\n  en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));\n  en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));\n  var t = es * es;\n  en[2] = t * (C44 - es * (C46 + es * C48));\n  t *= es;\n  en[3] = t * (C66 - es * C68);\n  en[4] = t * es * C88;\n  return en;\n}","export default function(phi, sphi, cphi, en) {\n  cphi *= sphi;\n  sphi *= sphi;\n  return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));\n}","import pj_mlfn from \"./pj_mlfn\";\nimport {EPSLN} from '../constants/values';\n\nvar MAX_ITER = 20;\n\nexport default function(arg, es, en) {\n  var k = 1 / (1 - es);\n  var phi = arg;\n  for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */\n    var s = Math.sin(phi);\n    var t = 1 - es * s * s;\n    //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n    //phi -= t * (t * Math.sqrt(t)) * k;\n    t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n    phi -= t;\n    if (Math.abs(t) < EPSLN) {\n      return phi;\n    }\n  }\n  //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n  return phi;\n}\n","// Heavily based on this tmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js\n\nimport pj_enfn from '../common/pj_enfn';\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport adjust_lon from '../common/adjust_lon';\n\nimport {EPSLN, HALF_PI} from '../constants/values';\nimport sign from '../common/sign';\n\nexport function init() {\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  if (this.es) {\n    this.en = pj_enfn(this.es);\n    this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);\n  }\n}\n\n/**\n    Transverse Mercator Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var con;\n  var x, y;\n  var sin_phi = Math.sin(lat);\n  var cos_phi = Math.cos(lat);\n\n  if (!this.es) {\n    var b = cos_phi * Math.sin(delta_lon);\n\n    if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {\n      return (93);\n    }\n    else {\n      x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;\n      y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));\n      b = Math.abs(y);\n\n      if (b >= 1) {\n        if ((b - 1) > EPSLN) {\n          return (93);\n        }\n        else {\n          y = 0;\n        }\n      }\n      else {\n        y = Math.acos(y);\n      }\n\n      if (lat < 0) {\n        y = -y;\n      }\n\n      y = this.a * this.k0 * (y - this.lat0) + this.y0;\n    }\n  }\n  else {\n    var al = cos_phi * delta_lon;\n    var als = Math.pow(al, 2);\n    var c = this.ep2 * Math.pow(cos_phi, 2);\n    var cs = Math.pow(c, 2);\n    var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;\n    var t = Math.pow(tq, 2);\n    var ts = Math.pow(t, 2);\n    con = 1 - this.es * Math.pow(sin_phi, 2);\n    al = al / Math.sqrt(con);\n    var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);\n\n    x = this.a * (this.k0 * al * (1 +\n      als / 6 * (1 - t + c +\n      als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +\n      als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +\n      this.x0;\n\n    y = this.a * (this.k0 * (ml - this.ml0 +\n      sin_phi * delta_lon * al / 2 * (1 +\n      als / 12 * (5 - t + 9 * c + 4 * cs +\n      als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +\n      als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +\n      this.y0;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\n/**\n    Transverse Mercator Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var con, phi;\n  var lat, lon;\n  var x = (p.x - this.x0) * (1 / this.a);\n  var y = (p.y - this.y0) * (1 / this.a);\n\n  if (!this.es) {\n    var f = Math.exp(x / this.k0);\n    var g = 0.5 * (f - 1 / f);\n    var temp = this.lat0 + y / this.k0;\n    var h = Math.cos(temp);\n    con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));\n    lat = Math.asin(con);\n\n    if (y < 0) {\n      lat = -lat;\n    }\n\n    if ((g === 0) && (h === 0)) {\n      lon = 0;\n    }\n    else {\n      lon = adjust_lon(Math.atan2(g, h) + this.long0);\n    }\n  }\n  else { // ellipsoidal form\n    con = this.ml0 + y / this.k0;\n    phi = pj_inv_mlfn(con, this.es, this.en);\n\n    if (Math.abs(phi) < HALF_PI) {\n      var sin_phi = Math.sin(phi);\n      var cos_phi = Math.cos(phi);\n      var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;\n      var c = this.ep2 * Math.pow(cos_phi, 2);\n      var cs = Math.pow(c, 2);\n      var t = Math.pow(tan_phi, 2);\n      var ts = Math.pow(t, 2);\n      con = 1 - this.es * Math.pow(sin_phi, 2);\n      var d = x * Math.sqrt(con) / this.k0;\n      var ds = Math.pow(d, 2);\n      con = con * tan_phi;\n\n      lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -\n        ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -\n        ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -\n        ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));\n\n      lon = adjust_lon(this.long0 + (d * (1 -\n        ds / 6 * (1 + 2 * t + c -\n        ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -\n        ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));\n    }\n    else {\n      lat = HALF_PI * sign(y);\n      lon = 0;\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Transverse_Mercator\", \"Transverse Mercator\", \"tmerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r - 1 / r) / 2;\n  return r;\n}","export default function(x, y) {\n  x = Math.abs(x);\n  y = Math.abs(y);\n  var a = Math.max(x, y);\n  var b = Math.min(x, y) / (a ? a : 1);\n\n  return a * Math.sqrt(1 + Math.pow(b, 2));\n}\n","export default function(x) {\n  var y = 1 + x;\n  var z = y - 1;\n\n  return z === 0 ? x : x * Math.log(y) / z;\n}\n","import hypot from './hypot';\nimport log1py from './log1py';\n\nexport default function(x) {\n  var y = Math.abs(x);\n  y = log1py(y * (1 + y / (hypot(1, y) + 1)));\n\n  return x < 0 ? -y : y;\n}\n","export default function(pp, B) {\n  var cos_2B = 2 * Math.cos(2 * B);\n  var i = pp.length - 1;\n  var h1 = pp[i];\n  var h2 = 0;\n  var h;\n\n  while (--i >= 0) {\n    h = -h2 + cos_2B * h1 + pp[i];\n    h2 = h1;\n    h1 = h;\n  }\n\n  return (B + h * Math.sin(2 * B));\n}\n","export default function(pp, arg_r) {\n  var r = 2 * Math.cos(arg_r);\n  var i = pp.length - 1;\n  var hr1 = pp[i];\n  var hr2 = 0;\n  var hr;\n\n  while (--i >= 0) {\n    hr = -hr2 + r * hr1 + pp[i];\n    hr2 = hr1;\n    hr1 = hr;\n  }\n\n  return Math.sin(arg_r) * hr;\n}\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r + 1 / r) / 2;\n  return r;\n}","import sinh from './sinh';\nimport cosh from './cosh';\n\nexport default function(pp, arg_r, arg_i) {\n  var sin_arg_r = Math.sin(arg_r);\n  var cos_arg_r = Math.cos(arg_r);\n  var sinh_arg_i = sinh(arg_i);\n  var cosh_arg_i = cosh(arg_i);\n  var r = 2 * cos_arg_r * cosh_arg_i;\n  var i = -2 * sin_arg_r * sinh_arg_i;\n  var j = pp.length - 1;\n  var hr = pp[j];\n  var hi1 = 0;\n  var hr1 = 0;\n  var hi = 0;\n  var hr2;\n  var hi2;\n\n  while (--j >= 0) {\n    hr2 = hr1;\n    hi2 = hi1;\n    hr1 = hr;\n    hi1 = hi;\n    hr = -hr2 + r * hr1 - i * hi1 + pp[j];\n    hi = -hi2 + i * hr1 + r * hi1;\n  }\n\n  r = sin_arg_r * cosh_arg_i;\n  i = cos_arg_r * sinh_arg_i;\n\n  return [r * hr - i * hi, r * hi + i * hr];\n}\n","// Heavily based on this etmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js\n\nimport sinh from '../common/sinh';\nimport hypot from '../common/hypot';\nimport asinhy from '../common/asinhy';\nimport gatg from '../common/gatg';\nimport clens from '../common/clens';\nimport clens_cmplx from '../common/clens_cmplx';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  if (this.es === undefined || this.es <= 0) {\n    throw new Error('incorrect elliptical usage');\n  }\n\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  this.cgb = [];\n  this.cbg = [];\n  this.utg = [];\n  this.gtu = [];\n\n  var f = this.es / (1 + Math.sqrt(1 - this.es));\n  var n = f / (2 - f);\n  var np = n;\n\n  this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));\n  this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));\n\n  np = np * n;\n  this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));\n  this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));\n\n  np = np * n;\n  this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));\n  this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));\n\n  np = np * n;\n  this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));\n  this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));\n\n  np = np * n;\n  this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));\n  this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));\n\n  np = np * n;\n  this.cgb[5] = np * (601676 / 22275);\n  this.cbg[5] = np * (444337 / 155925);\n\n  np = Math.pow(n, 2);\n  this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));\n\n  this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));\n  this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));\n\n  this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));\n  this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));\n\n  np = np * n;\n  this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));\n  this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));\n\n  np = np * n;\n  this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));\n  this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));\n\n  np = np * n;\n  this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));\n  this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));\n\n  np = np * n;\n  this.utg[5] = np * (-20648693 / 638668800);\n  this.gtu[5] = np * (212378941 / 319334400);\n\n  var Z = gatg(this.cbg, this.lat0);\n  this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));\n}\n\nexport function forward(p) {\n  var Ce = adjust_lon(p.x - this.long0);\n  var Cn = p.y;\n\n  Cn = gatg(this.cbg, Cn);\n  var sin_Cn = Math.sin(Cn);\n  var cos_Cn = Math.cos(Cn);\n  var sin_Ce = Math.sin(Ce);\n  var cos_Ce = Math.cos(Ce);\n\n  Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);\n  Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));\n  Ce = asinhy(Math.tan(Ce));\n\n  var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);\n\n  Cn = Cn + tmp[0];\n  Ce = Ce + tmp[1];\n\n  var x;\n  var y;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    x = this.a * (this.Qn * Ce) + this.x0;\n    y = this.a * (this.Qn * Cn + this.Zb) + this.y0;\n  }\n  else {\n    x = Infinity;\n    y = Infinity;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\nexport function inverse(p) {\n  var Ce = (p.x - this.x0) * (1 / this.a);\n  var Cn = (p.y - this.y0) * (1 / this.a);\n\n  Cn = (Cn - this.Zb) / this.Qn;\n  Ce = Ce / this.Qn;\n\n  var lon;\n  var lat;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);\n\n    Cn = Cn + tmp[0];\n    Ce = Ce + tmp[1];\n    Ce = Math.atan(sinh(Ce));\n\n    var sin_Cn = Math.sin(Cn);\n    var cos_Cn = Math.cos(Cn);\n    var sin_Ce = Math.sin(Ce);\n    var cos_Ce = Math.cos(Ce);\n\n    Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));\n    Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);\n\n    lon = adjust_lon(Ce + this.long0);\n    lat = gatg(this.cgb, Cn);\n  }\n  else {\n    lon = Infinity;\n    lat = Infinity;\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Extended_Transverse_Mercator\", \"Extended Transverse Mercator\", \"etmerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from './adjust_lon';\n\nexport default function(zone, lon) {\n  if (zone === undefined) {\n    zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;\n\n    if (zone < 0) {\n      return 0;\n    } else if (zone > 60) {\n      return 60;\n    }\n  }\n  return zone;\n}\n","import adjust_zone from '../common/adjust_zone';\nimport etmerc from './etmerc';\nexport var dependsOn = 'etmerc';\nimport {D2R} from '../constants/values';\n\n\nexport function init() {\n  var zone = adjust_zone(this.zone, this.long0);\n  if (zone === undefined) {\n    throw new Error('unknown utm zone');\n  }\n  this.lat0 = 0;\n  this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R;\n  this.x0 = 500000;\n  this.y0 = this.utmSouth ? 10000000 : 0;\n  this.k0 = 0.9996;\n\n  etmerc.init.apply(this);\n  this.forward = etmerc.forward;\n  this.inverse = etmerc.inverse;\n}\n\nexport var names = [\"Universal Transverse Mercator System\", \"utm\"];\nexport default {\n  init: init,\n  names: names,\n  dependsOn: dependsOn\n};\n","export default function(esinp, exp) {\n  return (Math.pow((1 - esinp) / (1 + esinp), exp));\n}","import srat from '../common/srat';\nvar MAX_ITER = 20;\nimport {HALF_PI, FORTPI} from '../constants/values';\n\nexport function init() {\n  var sphi = Math.sin(this.lat0);\n  var cphi = Math.cos(this.lat0);\n  cphi *= cphi;\n  this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);\n  this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));\n  this.phic0 = Math.asin(sphi / this.C);\n  this.ratexp = 0.5 * this.C * this.e;\n  this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;\n  p.x = this.C * lon;\n  return p;\n}\n\nexport function inverse(p) {\n  var DEL_TOL = 1e-14;\n  var lon = p.x / this.C;\n  var lat = p.y;\n  var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);\n  for (var i = MAX_ITER; i > 0; --i) {\n    lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), - 0.5 * this.e)) - HALF_PI;\n    if (Math.abs(lat - p.y) < DEL_TOL) {\n      break;\n    }\n    p.y = lat;\n  }\n  /* convergence failed */\n  if (!i) {\n    return null;\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gauss\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import gauss from './gauss';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  gauss.init.apply(this);\n  if (!this.rc) {\n    return;\n  }\n  this.sinc0 = Math.sin(this.phic0);\n  this.cosc0 = Math.cos(this.phic0);\n  this.R2 = 2 * this.rc;\n  if (!this.title) {\n    this.title = \"Oblique Stereographic Alternative\";\n  }\n}\n\nexport function forward(p) {\n  var sinc, cosc, cosl, k;\n  p.x = adjust_lon(p.x - this.long0);\n  gauss.forward.apply(this, [p]);\n  sinc = Math.sin(p.y);\n  cosc = Math.cos(p.y);\n  cosl = Math.cos(p.x);\n  k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\n  p.x = k * cosc * Math.sin(p.x);\n  p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\n  p.x = this.a * p.x + this.x0;\n  p.y = this.a * p.y + this.y0;\n  return p;\n}\n\nexport function inverse(p) {\n  var sinc, cosc, lon, lat, rho;\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n  if ((rho = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    var c = 2 * Math.atan2(rho, this.R2);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n    lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\n    lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  gauss.inverse.apply(this, [p]);\n  p.x = adjust_lon(p.x + this.long0);\n  return p;\n}\n\nexport var names = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"Polar_Stereographic\", \"sterea\",\"Oblique Stereographic Alternative\",\"Double_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {EPSLN, HALF_PI} from '../constants/values';\n\nimport sign from '../common/sign';\nimport msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function ssfn_(phit, sinphi, eccen) {\n  sinphi *= eccen;\n  return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\n}\n\nexport function init() {\n  this.coslat0 = Math.cos(this.lat0);\n  this.sinlat0 = Math.sin(this.lat0);\n  if (this.sphere) {\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n    }\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (this.lat0 > 0) {\n        //North pole\n        //trace('stere:north pole');\n        this.con = 1;\n      }\n      else {\n        //South pole\n        //trace('stere:south pole');\n        this.con = -1;\n      }\n    }\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n    }\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n    this.cosX0 = Math.cos(this.X0);\n    this.sinX0 = Math.sin(this.X0);\n  }\n}\n\n// Stereographic forward equations--mapping lat,long to x,y\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinlat = Math.sin(lat);\n  var coslat = Math.cos(lat);\n  var A, X, sinX, cosX, ts, rh;\n  var dlon = adjust_lon(lon - this.long0);\n\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n    //case of the origine point\n    //trace('stere:this is the origin point');\n    p.x = NaN;\n    p.y = NaN;\n    return p;\n  }\n  if (this.sphere) {\n    //trace('stere:sphere case');\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n    return p;\n  }\n  else {\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n    cosX = Math.cos(X);\n    sinX = Math.sin(X);\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n      rh = 2 * this.a * this.k0 * ts / this.cons;\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n      //trace(p.toString());\n      return p;\n    }\n    else if (Math.abs(this.sinlat0) < EPSLN) {\n      //Eq\n      //trace('stere:equateur');\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n      p.y = A * sinX;\n    }\n    else {\n      //other case\n      //trace('stere:normal case');\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n    }\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\n  }\n  //trace(p.toString());\n  return p;\n}\n\n//* Stereographic inverse equations--mapping x,y to lat/long\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat, ts, ce, Chi;\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  if (this.sphere) {\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n    lon = this.long0;\n    lat = this.lat0;\n    if (rh <= EPSLN) {\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n    if (Math.abs(this.coslat0) < EPSLN) {\n      if (this.lat0 > 0) {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      }\n      else {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      }\n    }\n    else {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (rh <= EPSLN) {\n        lat = this.lat0;\n        lon = this.long0;\n        p.x = lon;\n        p.y = lat;\n        //trace(p.toString());\n        return p;\n      }\n      p.x *= this.con;\n      p.y *= this.con;\n      ts = rh * this.cons / (2 * this.a * this.k0);\n      lat = this.con * phi2z(this.e, ts);\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\n    }\n    else {\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n      lon = this.long0;\n      if (rh <= EPSLN) {\n        Chi = this.X0;\n      }\n      else {\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n      }\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n\n  //trace(p.toString());\n  return p;\n\n}\n\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  ssfn_: ssfn_\n};\n","/*\n  references:\n    Formules et constantes pour le Calcul pour la\n    projection cylindrique conforme à axe oblique et pour la transformation entre\n    des systèmes de référence.\n    http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\n  */\n\nexport function init() {\n  var phy0 = this.lat0;\n  this.lambda0 = this.long0;\n  var sinPhy0 = Math.sin(phy0);\n  var semiMajorAxis = this.a;\n  var invF = this.rf;\n  var flattening = 1 / invF;\n  var e2 = 2 * flattening - Math.pow(flattening, 2);\n  var e = this.e = Math.sqrt(e2);\n  this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\n  this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\n  this.b0 = Math.asin(sinPhy0 / this.alpha);\n  var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\n  var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\n  var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\n  this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\n}\n\nexport function forward(p) {\n  var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\n  var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\n  var S = -this.alpha * (Sa1 + Sa2) + this.K;\n\n  // spheric latitude\n  var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);\n\n  // spheric longitude\n  var I = this.alpha * (p.x - this.lambda0);\n\n  // psoeudo equatorial rotation\n  var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\n\n  var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\n\n  p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\n  p.x = this.R * rotI + this.x0;\n  return p;\n}\n\nexport function inverse(p) {\n  var Y = p.x - this.x0;\n  var X = p.y - this.y0;\n\n  var rotI = Y / this.R;\n  var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\n\n  var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\n  var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\n\n  var lambda = this.lambda0 + I / this.alpha;\n\n  var S = 0;\n  var phy = b;\n  var prevPhy = -1000;\n  var iteration = 0;\n  while (Math.abs(phy - prevPhy) > 0.0000001) {\n    if (++iteration > 20) {\n      //...reportError(\"omercFwdInfinity\");\n      return;\n    }\n    //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\n    S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\n    prevPhy = phy;\n    phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\n  }\n\n  p.x = lambda;\n  p.y = phy;\n  return p;\n}\n\nexport var names = [\"somerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import tsfnz from '../common/tsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {EPSLN, HALF_PI, FORTPI} from '../constants/values';\n\n/* Initialize the Oblique Mercator  projection\n    ------------------------------------------*/\nexport function init() {\n  this.no_off = this.no_off || false;\n  this.no_rot = this.no_rot || false;\n\n  if (isNaN(this.k0)) {\n    this.k0 = 1;\n  }\n  var sinlat = Math.sin(this.lat0);\n  var coslat = Math.cos(this.lat0);\n  var con = this.e * sinlat;\n\n  this.bl = Math.sqrt(1 + this.es / (1 - this.es) * Math.pow(coslat, 4));\n  this.al = this.a * this.bl * this.k0 * Math.sqrt(1 - this.es) / (1 - con * con);\n  var t0 = tsfnz(this.e, this.lat0, sinlat);\n  var dl = this.bl / coslat * Math.sqrt((1 - this.es) / (1 - con * con));\n  if (dl * dl < 1) {\n    dl = 1;\n  }\n  var fl;\n  var gl;\n  if (!isNaN(this.longc)) {\n    //Central point and azimuth method\n\n    if (this.lat0 >= 0) {\n      fl = dl + Math.sqrt(dl * dl - 1);\n    }\n    else {\n      fl = dl - Math.sqrt(dl * dl - 1);\n    }\n    this.el = fl * Math.pow(t0, this.bl);\n    gl = 0.5 * (fl - 1 / fl);\n    this.gamma0 = Math.asin(Math.sin(this.alpha) / dl);\n    this.long0 = this.longc - Math.asin(gl * Math.tan(this.gamma0)) / this.bl;\n\n  }\n  else {\n    //2 points method\n    var t1 = tsfnz(this.e, this.lat1, Math.sin(this.lat1));\n    var t2 = tsfnz(this.e, this.lat2, Math.sin(this.lat2));\n    if (this.lat0 >= 0) {\n      this.el = (dl + Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);\n    }\n    else {\n      this.el = (dl - Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);\n    }\n    var hl = Math.pow(t1, this.bl);\n    var ll = Math.pow(t2, this.bl);\n    fl = this.el / hl;\n    gl = 0.5 * (fl - 1 / fl);\n    var jl = (this.el * this.el - ll * hl) / (this.el * this.el + ll * hl);\n    var pl = (ll - hl) / (ll + hl);\n    var dlon12 = adjust_lon(this.long1 - this.long2);\n    this.long0 = 0.5 * (this.long1 + this.long2) - Math.atan(jl * Math.tan(0.5 * this.bl * (dlon12)) / pl) / this.bl;\n    this.long0 = adjust_lon(this.long0);\n    var dlon10 = adjust_lon(this.long1 - this.long0);\n    this.gamma0 = Math.atan(Math.sin(this.bl * (dlon10)) / gl);\n    this.alpha = Math.asin(dl * Math.sin(this.gamma0));\n  }\n\n  if (this.no_off) {\n    this.uc = 0;\n  }\n  else {\n    if (this.lat0 >= 0) {\n      this.uc = this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));\n    }\n    else {\n      this.uc = -1 * this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));\n    }\n  }\n\n}\n\n/* Oblique Mercator forward equations--mapping lat,long to x,y\n    ----------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var dlon = adjust_lon(lon - this.long0);\n  var us, vs;\n  var con;\n  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n    if (lat > 0) {\n      con = -1;\n    }\n    else {\n      con = 1;\n    }\n    vs = this.al / this.bl * Math.log(Math.tan(FORTPI + con * this.gamma0 * 0.5));\n    us = -1 * con * HALF_PI * this.al / this.bl;\n  }\n  else {\n    var t = tsfnz(this.e, lat, Math.sin(lat));\n    var ql = this.el / Math.pow(t, this.bl);\n    var sl = 0.5 * (ql - 1 / ql);\n    var tl = 0.5 * (ql + 1 / ql);\n    var vl = Math.sin(this.bl * (dlon));\n    var ul = (sl * Math.sin(this.gamma0) - vl * Math.cos(this.gamma0)) / tl;\n    if (Math.abs(Math.abs(ul) - 1) <= EPSLN) {\n      vs = Number.POSITIVE_INFINITY;\n    }\n    else {\n      vs = 0.5 * this.al * Math.log((1 - ul) / (1 + ul)) / this.bl;\n    }\n    if (Math.abs(Math.cos(this.bl * (dlon))) <= EPSLN) {\n      us = this.al * this.bl * (dlon);\n    }\n    else {\n      us = this.al * Math.atan2(sl * Math.cos(this.gamma0) + vl * Math.sin(this.gamma0), Math.cos(this.bl * dlon)) / this.bl;\n    }\n  }\n\n  if (this.no_rot) {\n    p.x = this.x0 + us;\n    p.y = this.y0 + vs;\n  }\n  else {\n\n    us -= this.uc;\n    p.x = this.x0 + vs * Math.cos(this.alpha) + us * Math.sin(this.alpha);\n    p.y = this.y0 + us * Math.cos(this.alpha) - vs * Math.sin(this.alpha);\n  }\n  return p;\n}\n\nexport function inverse(p) {\n  var us, vs;\n  if (this.no_rot) {\n    vs = p.y - this.y0;\n    us = p.x - this.x0;\n  }\n  else {\n    vs = (p.x - this.x0) * Math.cos(this.alpha) - (p.y - this.y0) * Math.sin(this.alpha);\n    us = (p.y - this.y0) * Math.cos(this.alpha) + (p.x - this.x0) * Math.sin(this.alpha);\n    us += this.uc;\n  }\n  var qp = Math.exp(-1 * this.bl * vs / this.al);\n  var sp = 0.5 * (qp - 1 / qp);\n  var tp = 0.5 * (qp + 1 / qp);\n  var vp = Math.sin(this.bl * us / this.al);\n  var up = (vp * Math.cos(this.gamma0) + sp * Math.sin(this.gamma0)) / tp;\n  var ts = Math.pow(this.el / Math.sqrt((1 + up) / (1 - up)), 1 / this.bl);\n  if (Math.abs(up - 1) < EPSLN) {\n    p.x = this.long0;\n    p.y = HALF_PI;\n  }\n  else if (Math.abs(up + 1) < EPSLN) {\n    p.x = this.long0;\n    p.y = -1 * HALF_PI;\n  }\n  else {\n    p.y = phi2z(this.e, ts);\n    p.x = adjust_lon(this.long0 - Math.atan2(sp * Math.cos(this.gamma0) - vp * Math.sin(this.gamma0), Math.cos(this.bl * us / this.al)) / this.bl);\n  }\n  return p;\n}\n\nexport var names = [\"Hotine_Oblique_Mercator\", \"Hotine Oblique Mercator\", \"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\", \"Hotine_Oblique_Mercator_Azimuth_Center\", \"omerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport sign from '../common/sign';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {HALF_PI, EPSLN} from '../constants/values';\nexport function init() {\n\n  // array of:  r_maj,r_min,lat1,lat2,c_lon,c_lat,false_east,false_north\n  //double c_lat;                   /* center latitude                      */\n  //double c_lon;                   /* center longitude                     */\n  //double lat1;                    /* first standard parallel              */\n  //double lat2;                    /* second standard parallel             */\n  //double r_maj;                   /* major axis                           */\n  //double r_min;                   /* minor axis                           */\n  //double false_east;              /* x offset in meters                   */\n  //double false_north;             /* y offset in meters                   */\n\n  if (!this.lat2) {\n    this.lat2 = this.lat1;\n  } //if lat2 is not defined\n  if (!this.k0) {\n    this.k0 = 1;\n  }\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n\n  var temp = this.b / this.a;\n  this.e = Math.sqrt(1 - temp * temp);\n\n  var sin1 = Math.sin(this.lat1);\n  var cos1 = Math.cos(this.lat1);\n  var ms1 = msfnz(this.e, sin1, cos1);\n  var ts1 = tsfnz(this.e, this.lat1, sin1);\n\n  var sin2 = Math.sin(this.lat2);\n  var cos2 = Math.cos(this.lat2);\n  var ms2 = msfnz(this.e, sin2, cos2);\n  var ts2 = tsfnz(this.e, this.lat2, sin2);\n\n  var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n  }\n  else {\n    this.ns = sin1;\n  }\n  if (isNaN(this.ns)) {\n    this.ns = sin1;\n  }\n  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n  if (!this.title) {\n    this.title = \"Lambert Conformal Conic\";\n  }\n}\n\n// Lambert Conformal conic forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  // singular cases :\n  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n    lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n  }\n\n  var con = Math.abs(Math.abs(lat) - HALF_PI);\n  var ts, rh1;\n  if (con > EPSLN) {\n    ts = tsfnz(this.e, lat, Math.sin(lat));\n    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n  }\n  else {\n    con = lat * this.ns;\n    if (con <= 0) {\n      return null;\n    }\n    rh1 = 0;\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n\n  return p;\n}\n\n// Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var rh1, con, ts;\n  var lat, lon;\n  var x = (p.x - this.x0) / this.k0;\n  var y = (this.rh - (p.y - this.y0) / this.k0);\n  if (this.ns > 0) {\n    rh1 = Math.sqrt(x * x + y * y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(x * x + y * y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2((con * x), (con * y));\n  }\n  if ((rh1 !== 0) || (this.ns > 0)) {\n    con = 1 / this.ns;\n    ts = Math.pow((rh1 / (this.a * this.f0)), con);\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  else {\n    lat = -HALF_PI;\n  }\n  lon = adjust_lon(theta / this.ns + this.long0);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Lambert Tangential Conformal Conic Projection\", \"Lambert_Conformal_Conic\", \"Lambert_Conformal_Conic_2SP\", \"lcc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  this.a = 6377397.155;\n  this.es = 0.006674372230614;\n  this.e = Math.sqrt(this.es);\n  if (!this.lat0) {\n    this.lat0 = 0.863937979737193;\n  }\n  if (!this.long0) {\n    this.long0 = 0.7417649320975901 - 0.308341501185665;\n  }\n  /* if scale not set default to 0.9999 */\n  if (!this.k0) {\n    this.k0 = 0.9999;\n  }\n  this.s45 = 0.785398163397448; /* 45 */\n  this.s90 = 2 * this.s45;\n  this.fi0 = this.lat0;\n  this.e2 = this.es;\n  this.e = Math.sqrt(this.e2);\n  this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));\n  this.uq = 1.04216856380474;\n  this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);\n  this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);\n  this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;\n  this.k1 = this.k0;\n  this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));\n  this.s0 = 1.37008346281555;\n  this.n = Math.sin(this.s0);\n  this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);\n  this.ad = this.s90 - this.uq;\n}\n\n/* ellipsoid */\n/* calculate xy from lat/lon */\n/* Constants, identical to inverse transform function */\nexport function forward(p) {\n  var gfi, u, deltav, s, d, eps, ro;\n  var lon = p.x;\n  var lat = p.y;\n  var delta_lon = adjust_lon(lon - this.long0);\n  /* Transformation */\n  gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));\n  u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);\n  deltav = -delta_lon * this.alfa;\n  s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));\n  d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));\n  eps = this.n * d;\n  ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);\n  p.y = ro * Math.cos(eps) / 1;\n  p.x = ro * Math.sin(eps) / 1;\n\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  return (p);\n}\n\n/* calculate lat/lon from xy */\nexport function inverse(p) {\n  var u, deltav, s, d, eps, ro, fi1;\n  var ok;\n\n  /* Transformation */\n  /* revert y, x*/\n  var tmp = p.x;\n  p.x = p.y;\n  p.y = tmp;\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  ro = Math.sqrt(p.x * p.x + p.y * p.y);\n  eps = Math.atan2(p.y, p.x);\n  d = eps / Math.sin(this.s0);\n  s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);\n  u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));\n  deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));\n  p.x = this.long0 - deltav / this.alfa;\n  fi1 = u;\n  ok = 0;\n  var iter = 0;\n  do {\n    p.y = 2 * (Math.atan(Math.pow(this.k, - 1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);\n    if (Math.abs(fi1 - p.y) < 0.0000000001) {\n      ok = 1;\n    }\n    fi1 = p.y;\n    iter += 1;\n  } while (ok === 0 && iter < 15);\n  if (iter >= 15) {\n    return null;\n  }\n\n  return (p);\n}\n\nexport var names = [\"Krovak\", \"krovak\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(e0, e1, e2, e3, phi) {\n  return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));\n}","export default function(x) {\n  return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));\n}","export default function(x) {\n  return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));\n}","export default function(x) {\n  return (0.05859375 * x * x * (1 + 0.75 * x));\n}","export default function(x) {\n  return (x * x * x * (35 / 3072));\n}","export default function(a, e, sinphi) {\n  var temp = e * sinphi;\n  return a / Math.sqrt(1 - temp * temp);\n}","import {HALF_PI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));\n}\n","export default function(ml, e0, e1, e2, e3) {\n  var phi;\n  var dphi;\n\n  phi = ml / e0;\n  for (var i = 0; i < 15; i++) {\n    dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //..reportError(\"IMLFN-CONV:Latitude failed to converge after 15 iterations\");\n  return NaN;\n}","import mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nexport function init() {\n  if (!this.sphere) {\n    this.e0 = e0fn(this.es);\n    this.e1 = e1fn(this.es);\n    this.e2 = e2fn(this.es);\n    this.e3 = e3fn(this.es);\n    this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  }\n}\n\n/* Cassini forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y;\n  var lam = p.x;\n  var phi = p.y;\n  lam = adjust_lon(lam - this.long0);\n\n  if (this.sphere) {\n    x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));\n    y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);\n  }\n  else {\n    //ellipsoid\n    var sinphi = Math.sin(phi);\n    var cosphi = Math.cos(phi);\n    var nl = gN(this.a, this.e, sinphi);\n    var tl = Math.tan(phi) * Math.tan(phi);\n    var al = lam * Math.cos(phi);\n    var asq = al * al;\n    var cl = this.es * cosphi * cosphi / (1 - this.es);\n    var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n\n    x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));\n    y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);\n\n\n  }\n\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var phi, lam;\n\n  if (this.sphere) {\n    var dd = y + this.lat0;\n    phi = Math.asin(Math.sin(dd) * Math.cos(x));\n    lam = Math.atan2(Math.tan(x), Math.cos(dd));\n  }\n  else {\n    /* ellipsoid */\n    var ml1 = this.ml0 / this.a + y;\n    var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);\n    if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {\n      p.x = this.long0;\n      p.y = HALF_PI;\n      if (y < 0) {\n        p.y *= -1;\n      }\n      return p;\n    }\n    var nl1 = gN(this.a, this.e, Math.sin(phi1));\n\n    var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);\n    var tl1 = Math.pow(Math.tan(phi1), 2);\n    var dl = x * this.a / nl1;\n    var dsq = dl * dl;\n    phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);\n    lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);\n\n  }\n\n  p.x = adjust_lon(lam + this.long0);\n  p.y = adjust_lat(phi);\n  return p;\n\n}\n\nexport var names = [\"Cassini\", \"Cassini_Soldner\", \"cass\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(eccent, sinphi) {\n  var con;\n  if (eccent > 1.0e-7) {\n    con = eccent * sinphi;\n    return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));\n  }\n  else {\n    return (2 * sinphi);\n  }\n}","\nimport {HALF_PI, EPSLN, FORTPI} from '../constants/values';\n\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\nexport var S_POLE = 1;\n\nexport var N_POLE = 2;\nexport var EQUIT = 3;\nexport var OBLIQ = 4;\n\n/* Initialize the Lambert Azimuthal Equal Area projection\n  ------------------------------------------------------*/\nexport function init() {\n  var t = Math.abs(this.lat0);\n  if (Math.abs(t - HALF_PI) < EPSLN) {\n    this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\n  }\n  else if (Math.abs(t) < EPSLN) {\n    this.mode = this.EQUIT;\n  }\n  else {\n    this.mode = this.OBLIQ;\n  }\n  if (this.es > 0) {\n    var sinphi;\n\n    this.qp = qsfnz(this.e, 1);\n    this.mmf = 0.5 / (1 - this.es);\n    this.apa = authset(this.es);\n    switch (this.mode) {\n    case this.N_POLE:\n      this.dd = 1;\n      break;\n    case this.S_POLE:\n      this.dd = 1;\n      break;\n    case this.EQUIT:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      this.dd = 1 / this.rq;\n      this.xmf = 1;\n      this.ymf = 0.5 * this.qp;\n      break;\n    case this.OBLIQ:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      sinphi = Math.sin(this.lat0);\n      this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\n      this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\n      this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\n      this.ymf = (this.xmf = this.rq) / this.dd;\n      this.xmf *= this.dd;\n      break;\n    }\n  }\n  else {\n    if (this.mode === this.OBLIQ) {\n      this.sinph0 = Math.sin(this.lat0);\n      this.cosph0 = Math.cos(this.lat0);\n    }\n  }\n}\n\n/* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\n  var lam = p.x;\n  var phi = p.y;\n\n  lam = adjust_lon(lam - this.long0);\n  if (this.sphere) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    coslam = Math.cos(lam);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      if (y <= EPSLN) {\n        return null;\n      }\n      y = Math.sqrt(2 / y);\n      x = y * cosphi * Math.sin(lam);\n      y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        coslam = -coslam;\n      }\n      if (Math.abs(phi + this.phi0) < EPSLN) {\n        return null;\n      }\n      y = FORTPI - phi * 0.5;\n      y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));\n      x = y * Math.sin(lam);\n      y *= coslam;\n    }\n  }\n  else {\n    sinb = 0;\n    cosb = 0;\n    b = 0;\n    coslam = Math.cos(lam);\n    sinlam = Math.sin(lam);\n    sinphi = Math.sin(phi);\n    q = qsfnz(this.e, sinphi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinb = q / this.qp;\n      cosb = Math.sqrt(1 - sinb * sinb);\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n      b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\n      break;\n    case this.EQUIT:\n      b = 1 + cosb * coslam;\n      break;\n    case this.N_POLE:\n      b = HALF_PI + phi;\n      q = this.qp - q;\n      break;\n    case this.S_POLE:\n      b = phi - HALF_PI;\n      q = this.qp + q;\n      break;\n    }\n    if (Math.abs(b) < EPSLN) {\n      return null;\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n    case this.EQUIT:\n      b = Math.sqrt(2 / b);\n      if (this.mode === this.OBLIQ) {\n        y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\n      }\n      else {\n        y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\n      }\n      x = this.xmf * b * cosb * sinlam;\n      break;\n    case this.N_POLE:\n    case this.S_POLE:\n      if (q >= 0) {\n        x = (b = Math.sqrt(q)) * sinlam;\n        y = coslam * ((this.mode === this.S_POLE) ? b : -b);\n      }\n      else {\n        x = y = 0;\n      }\n      break;\n    }\n  }\n\n  p.x = this.a * x + this.x0;\n  p.y = this.a * y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var lam, phi, cCe, sCe, q, rho, ab;\n  if (this.sphere) {\n    var cosz = 0,\n      rh, sinz = 0;\n\n    rh = Math.sqrt(x * x + y * y);\n    phi = rh * 0.5;\n    if (phi > 1) {\n      return null;\n    }\n    phi = 2 * Math.asin(phi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinz = Math.sin(phi);\n      cosz = Math.cos(phi);\n    }\n    switch (this.mode) {\n    case this.EQUIT:\n      phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);\n      x *= sinz;\n      y = cosz * rh;\n      break;\n    case this.OBLIQ:\n      phi = (Math.abs(rh) <= EPSLN) ? this.phi0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\n      x *= sinz * this.cosph0;\n      y = (cosz - Math.sin(phi) * this.sinph0) * rh;\n      break;\n    case this.N_POLE:\n      y = -y;\n      phi = HALF_PI - phi;\n      break;\n    case this.S_POLE:\n      phi -= HALF_PI;\n      break;\n    }\n    lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);\n  }\n  else {\n    ab = 0;\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      x /= this.dd;\n      y *= this.dd;\n      rho = Math.sqrt(x * x + y * y);\n      if (rho < EPSLN) {\n        p.x = 0;\n        p.y = this.phi0;\n        return p;\n      }\n      sCe = 2 * Math.asin(0.5 * rho / this.rq);\n      cCe = Math.cos(sCe);\n      x *= (sCe = Math.sin(sCe));\n      if (this.mode === this.OBLIQ) {\n        ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\n        q = this.qp * ab;\n        y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\n      }\n      else {\n        ab = y * sCe / rho;\n        q = this.qp * ab;\n        y = rho * cCe;\n      }\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        y = -y;\n      }\n      q = (x * x + y * y);\n      if (!q) {\n        p.x = 0;\n        p.y = this.phi0;\n        return p;\n      }\n      ab = 1 - q / this.qp;\n      if (this.mode === this.S_POLE) {\n        ab = -ab;\n      }\n    }\n    lam = Math.atan2(x, y);\n    phi = authlat(Math.asin(ab), this.apa);\n  }\n\n  p.x = adjust_lon(this.long0 + lam);\n  p.y = phi;\n  return p;\n}\n\n/* determine latitude from authalic latitude */\nvar P00 = 0.33333333333333333333;\n\nvar P01 = 0.17222222222222222222;\nvar P02 = 0.10257936507936507936;\nvar P10 = 0.06388888888888888888;\nvar P11 = 0.06640211640211640211;\nvar P20 = 0.01641501294219154443;\n\nfunction authset(es) {\n  var t;\n  var APA = [];\n  APA[0] = es * P00;\n  t = es * es;\n  APA[0] += t * P01;\n  APA[1] = t * P10;\n  t *= es;\n  APA[0] += t * P02;\n  APA[1] += t * P11;\n  APA[2] = t * P20;\n  return APA;\n}\n\nfunction authlat(beta, APA) {\n  var t = beta + beta;\n  return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));\n}\n\nexport var names = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  S_POLE: S_POLE,\n  N_POLE: N_POLE,\n  EQUIT: EQUIT,\n  OBLIQ: OBLIQ\n};\n","export default function(x) {\n  if (Math.abs(x) > 1) {\n    x = (x > 1) ? 1 : -1;\n  }\n  return Math.asin(x);\n}","import msfnz from '../common/msfnz';\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e3 = Math.sqrt(this.es);\n\n  this.sin_po = Math.sin(this.lat1);\n  this.cos_po = Math.cos(this.lat1);\n  this.t1 = this.sin_po;\n  this.con = this.sin_po;\n  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs1 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  this.sin_po = Math.sin(this.lat2);\n  this.cos_po = Math.cos(this.lat2);\n  this.t2 = this.sin_po;\n  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs2 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  this.sin_po = Math.sin(this.lat0);\n  this.cos_po = Math.cos(this.lat0);\n  this.t3 = this.sin_po;\n  this.qs0 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n  }\n  else {\n    this.ns0 = this.con;\n  }\n  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n}\n\n/* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n  -------------------------------------------------------------------*/\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  this.sin_phi = Math.sin(lat);\n  this.cos_phi = Math.cos(lat);\n\n  var qs = qsfnz(this.e3, this.sin_phi, this.cos_phi);\n  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n  var theta = this.ns0 * adjust_lon(lon - this.long0);\n  var x = rh1 * Math.sin(theta) + this.x0;\n  var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh1, qs, con, theta, lon, lat;\n\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  if (this.ns0 >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n  con = rh1 * this.ns0 / this.a;\n  if (this.sphere) {\n    lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n  }\n  else {\n    qs = (this.c - con * con) / this.ns0;\n    lat = this.phi1z(this.e3, qs);\n  }\n\n  lon = adjust_lon(theta / this.ns0 + this.long0);\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\n/* Function to compute phi1, the latitude for the inverse of the\n   Albers Conical Equal-Area projection.\n-------------------------------------------*/\nexport function phi1z(eccent, qs) {\n  var sinphi, cosphi, con, com, dphi;\n  var phi = asinz(0.5 * qs);\n  if (eccent < EPSLN) {\n    return phi;\n  }\n\n  var eccnts = eccent * eccent;\n  for (var i = 1; i <= 25; i++) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    con = eccent * sinphi;\n    com = 1 - con * con;\n    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi = phi + dphi;\n    if (Math.abs(dphi) <= 1e-7) {\n      return phi;\n    }\n  }\n  return null;\n}\n\nexport var names = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  phi1z: phi1z\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\n/*\n  reference:\n    Wolfram Mathworld \"Gnomonic Projection\"\n    http://mathworld.wolfram.com/GnomonicProjection.html\n    Accessed: 12th November 2009\n  */\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n  // Approximation for projecting points to the horizon (infinity)\n  this.infinity_dist = 1000 * this.a;\n  this.rc = 1;\n}\n\n/* Gnomonic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g;\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;\n  }\n  else {\n\n    // Point is in the opposing hemisphere and is unprojectable\n    // We still need to return a reasonable point, so we project\n    // to infinity, on a bearing\n    // equivalent to the northern hemisphere equivalent\n    // This is a reasonable approximation for short shapes and lines that\n    // straddle the horizon.\n\n    x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);\n    y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* Rho */\n  var sinc, cosc;\n  var c;\n  var lon, lat;\n\n  /* Inverse equations\n      -----------------*/\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n\n  if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    c = Math.atan2(rh, this.rc);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n\n    lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);\n    lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);\n    lon = adjust_lon(this.long0 + lon);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gnom\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, q) {\n  var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));\n  if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {\n    if (q < 0) {\n      return (-1 * HALF_PI);\n    }\n    else {\n      return HALF_PI;\n    }\n  }\n  //var phi = 0.5* q/(1-eccent*eccent);\n  var phi = Math.asin(0.5 * q);\n  var dphi;\n  var sin_phi;\n  var cos_phi;\n  var con;\n  for (var i = 0; i < 30; i++) {\n    sin_phi = Math.sin(phi);\n    cos_phi = Math.cos(phi);\n    con = eccent * sin_phi;\n    dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //console.log(\"IQSFN-CONV:Latitude failed to converge after 30 iterations\");\n  return NaN;\n}\n","import adjust_lon from '../common/adjust_lon';\nimport qsfnz from '../common/qsfnz';\nimport msfnz from '../common/msfnz';\nimport iqsfnz from '../common/iqsfnz';\n\n/*\n  reference:\n    \"Cartographic Projection Procedures for the UNIX Environment-\n    A User's Manual\" by Gerald I. Evenden,\n    USGS Open File Report 90-284and Release 4 Interim Reports (2003)\n*/\nexport function init() {\n  //no-op\n  if (!this.sphere) {\n    this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n  }\n}\n\n/* Cylindrical Equal Area forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  if (this.sphere) {\n    x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\n    y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\n  }\n  else {\n    var qs = qsfnz(this.e, Math.sin(lat));\n    x = this.x0 + this.a * this.k0 * dlon;\n    y = this.y0 + this.a * qs * 0.5 / this.k0;\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));\n    lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));\n  }\n  else {\n    lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n    lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"cea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Equidistant Cylindrical (Plate Carre)\";\n\n  this.rc = Math.cos(this.lat_ts);\n}\n\n// forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  var dlon = adjust_lon(lon - this.long0);\n  var dlat = adjust_lat(lat - this.lat0);\n  p.x = this.x0 + (this.a * dlon * this.rc);\n  p.y = this.y0 + (this.a * dlat);\n  return p;\n}\n\n// inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var x = p.x;\n  var y = p.y;\n\n  p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));\n  p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));\n  return p;\n}\n\nexport var names = [\"Equirectangular\", \"Equidistant_Cylindrical\", \"eqc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport mlfn from '../common/mlfn';\nimport {EPSLN} from '../constants/values';\n\nimport gN from '../common/gN';\nvar MAX_ITER = 20;\n\nexport function init() {\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n  this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\n}\n\n/* Polyconic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y, el;\n  var dlon = adjust_lon(lon - this.long0);\n  el = dlon * Math.sin(lat);\n  if (this.sphere) {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.a * this.lat0;\n    }\n    else {\n      x = this.a * Math.sin(el) / Math.tan(lat);\n      y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\n    }\n  }\n  else {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.ml0;\n    }\n    else {\n      var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\n      x = nl * Math.sin(el);\n      y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\n    }\n\n  }\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  var lon, lat, x, y, i;\n  var al, bl;\n  var phi, dphi;\n  x = p.x - this.x0;\n  y = p.y - this.y0;\n\n  if (this.sphere) {\n    if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\n      lon = adjust_lon(x / this.a + this.long0);\n      lat = 0;\n    }\n    else {\n      al = this.lat0 + y / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var tanphi;\n      for (i = MAX_ITER; i; --i) {\n        tanphi = Math.tan(phi);\n        dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\n        phi += dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n      lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));\n    }\n  }\n  else {\n    if (Math.abs(y + this.ml0) <= EPSLN) {\n      lat = 0;\n      lon = adjust_lon(this.long0 + x / this.a);\n    }\n    else {\n\n      al = (this.ml0 + y) / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var cl, mln, mlnp, ma;\n      var con;\n      for (i = MAX_ITER; i; --i) {\n        con = this.e * Math.sin(phi);\n        cl = Math.sqrt(1 - con * con) * Math.tan(phi);\n        mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n        mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\n        ma = mln / this.a;\n        dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\n        phi -= dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n\n      //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\n      cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\n      lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Polyconic\", \"poly\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {SEC_TO_RAD} from '../constants/values';\n\n/*\n  reference\n    Department of Land and Survey Technical Circular 1973/32\n      http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf\n    OSG Technical Report 4.1\n      http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf\n  */\n\n/**\n * iterations: Number of iterations to refine inverse transform.\n *     0 -> km accuracy\n *     1 -> m accuracy -- suitable for most mapping applications\n *     2 -> mm accuracy\n */\nexport var iterations = 1;\n\nexport function init() {\n  this.A = [];\n  this.A[1] = 0.6399175073;\n  this.A[2] = -0.1358797613;\n  this.A[3] = 0.063294409;\n  this.A[4] = -0.02526853;\n  this.A[5] = 0.0117879;\n  this.A[6] = -0.0055161;\n  this.A[7] = 0.0026906;\n  this.A[8] = -0.001333;\n  this.A[9] = 0.00067;\n  this.A[10] = -0.00034;\n\n  this.B_re = [];\n  this.B_im = [];\n  this.B_re[1] = 0.7557853228;\n  this.B_im[1] = 0;\n  this.B_re[2] = 0.249204646;\n  this.B_im[2] = 0.003371507;\n  this.B_re[3] = -0.001541739;\n  this.B_im[3] = 0.041058560;\n  this.B_re[4] = -0.10162907;\n  this.B_im[4] = 0.01727609;\n  this.B_re[5] = -0.26623489;\n  this.B_im[5] = -0.36249218;\n  this.B_re[6] = -0.6870983;\n  this.B_im[6] = -1.1651967;\n\n  this.C_re = [];\n  this.C_im = [];\n  this.C_re[1] = 1.3231270439;\n  this.C_im[1] = 0;\n  this.C_re[2] = -0.577245789;\n  this.C_im[2] = -0.007809598;\n  this.C_re[3] = 0.508307513;\n  this.C_im[3] = -0.112208952;\n  this.C_re[4] = -0.15094762;\n  this.C_im[4] = 0.18200602;\n  this.C_re[5] = 1.01418179;\n  this.C_im[5] = 1.64497696;\n  this.C_re[6] = 1.9660549;\n  this.C_im[6] = 2.5127645;\n\n  this.D = [];\n  this.D[1] = 1.5627014243;\n  this.D[2] = 0.5185406398;\n  this.D[3] = -0.03333098;\n  this.D[4] = -0.1052906;\n  this.D[5] = -0.0368594;\n  this.D[6] = 0.007317;\n  this.D[7] = 0.01220;\n  this.D[8] = 0.00394;\n  this.D[9] = -0.0013;\n}\n\n/**\n    New Zealand Map Grid Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var n;\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lat = lat - this.lat0;\n  var delta_lon = lon - this.long0;\n\n  // 1. Calculate d_phi and d_psi    ...                          // and d_lambda\n  // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.\n  var d_phi = delta_lat / SEC_TO_RAD * 1E-5;\n  var d_lambda = delta_lon;\n  var d_phi_n = 1; // d_phi^0\n\n  var d_psi = 0;\n  for (n = 1; n <= 10; n++) {\n    d_phi_n = d_phi_n * d_phi;\n    d_psi = d_psi + this.A[n] * d_phi_n;\n  }\n\n  // 2. Calculate theta\n  var th_re = d_psi;\n  var th_im = d_lambda;\n\n  // 3. Calculate z\n  var th_n_re = 1;\n  var th_n_im = 0; // theta^0\n  var th_n_re1;\n  var th_n_im1;\n\n  var z_re = 0;\n  var z_im = 0;\n  for (n = 1; n <= 6; n++) {\n    th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n    th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n    th_n_re = th_n_re1;\n    th_n_im = th_n_im1;\n    z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;\n    z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;\n  }\n\n  // 4. Calculate easting and northing\n  p.x = (z_im * this.a) + this.x0;\n  p.y = (z_re * this.a) + this.y0;\n\n  return p;\n}\n\n/**\n    New Zealand Map Grid Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var n;\n  var x = p.x;\n  var y = p.y;\n\n  var delta_x = x - this.x0;\n  var delta_y = y - this.y0;\n\n  // 1. Calculate z\n  var z_re = delta_y / this.a;\n  var z_im = delta_x / this.a;\n\n  // 2a. Calculate theta - first approximation gives km accuracy\n  var z_n_re = 1;\n  var z_n_im = 0; // z^0\n  var z_n_re1;\n  var z_n_im1;\n\n  var th_re = 0;\n  var th_im = 0;\n  for (n = 1; n <= 6; n++) {\n    z_n_re1 = z_n_re * z_re - z_n_im * z_im;\n    z_n_im1 = z_n_im * z_re + z_n_re * z_im;\n    z_n_re = z_n_re1;\n    z_n_im = z_n_im1;\n    th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;\n    th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;\n  }\n\n  // 2b. Iterate to refine the accuracy of the calculation\n  //        0 iterations gives km accuracy\n  //        1 iteration gives m accuracy -- good enough for most mapping applications\n  //        2 iterations bives mm accuracy\n  for (var i = 0; i < this.iterations; i++) {\n    var th_n_re = th_re;\n    var th_n_im = th_im;\n    var th_n_re1;\n    var th_n_im1;\n\n    var num_re = z_re;\n    var num_im = z_im;\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    th_n_re = 1;\n    th_n_im = 0;\n    var den_re = this.B_re[1];\n    var den_im = this.B_im[1];\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    // Complex division\n    var den2 = den_re * den_re + den_im * den_im;\n    th_re = (num_re * den_re + num_im * den_im) / den2;\n    th_im = (num_im * den_re - num_re * den_im) / den2;\n  }\n\n  // 3. Calculate d_phi              ...                                    // and d_lambda\n  var d_psi = th_re;\n  var d_lambda = th_im;\n  var d_psi_n = 1; // d_psi^0\n\n  var d_phi = 0;\n  for (n = 1; n <= 9; n++) {\n    d_psi_n = d_psi_n * d_psi;\n    d_phi = d_phi + this.D[n] * d_psi_n;\n  }\n\n  // 4. Calculate latitude and longitude\n  // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.\n  var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);\n  var lon = this.long0 + d_lambda;\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"New_Zealand_Map_Grid\", \"nzmg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\n\n/* Initialize the Miller Cylindrical projection\n  -------------------------------------------*/\nexport function init() {\n  //no-op\n}\n\n/* Miller Cylindrical forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x = this.x0 + this.a * dlon;\n  var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Miller Cylindrical inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n\n  var lon = adjust_lon(this.long0 + p.x / this.a);\n  var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Miller_Cylindrical\", \"mill\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport pj_enfn from '../common/pj_enfn';\nvar MAX_ITER = 20;\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n\nexport function init() {\n  /* Place parameters in static storage for common use\n    -------------------------------------------------*/\n\n\n  if (!this.sphere) {\n    this.en = pj_enfn(this.es);\n  }\n  else {\n    this.n = 1;\n    this.m = 0;\n    this.es = 0;\n    this.C_y = Math.sqrt((this.m + 1) / this.n);\n    this.C_x = this.C_y / (this.m + 1);\n  }\n\n}\n\n/* Sinusoidal forward equations--mapping lat,long to x,y\n  -----------------------------------------------------*/\nexport function forward(p) {\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n    -----------------*/\n  lon = adjust_lon(lon - this.long0);\n\n  if (this.sphere) {\n    if (!this.m) {\n      lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\n    }\n    else {\n      var k = this.n * Math.sin(lat);\n      for (var i = MAX_ITER; i; --i) {\n        var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\n        lat -= V;\n        if (Math.abs(V) < EPSLN) {\n          break;\n        }\n      }\n    }\n    x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\n    y = this.a * this.C_y * lat;\n\n  }\n  else {\n\n    var s = Math.sin(lat);\n    var c = Math.cos(lat);\n    y = this.a * pj_mlfn(lat, s, c, this.en);\n    x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var lat, temp, lon, s;\n\n  p.x -= this.x0;\n  lon = p.x / this.a;\n  p.y -= this.y0;\n  lat = p.y / this.a;\n\n  if (this.sphere) {\n    lat /= this.C_y;\n    lon = lon / (this.C_x * (this.m + Math.cos(lat)));\n    if (this.m) {\n      lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\n    }\n    else if (this.n !== 1) {\n      lat = asinz(Math.sin(lat) / this.n);\n    }\n    lon = adjust_lon(lon + this.long0);\n    lat = adjust_lat(lat);\n  }\n  else {\n    lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\n    s = Math.abs(lat);\n    if (s < HALF_PI) {\n      s = Math.sin(lat);\n      temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));\n      //temp = this.long0 + p.x / (this.a * Math.cos(lat));\n      lon = adjust_lon(temp);\n    }\n    else if ((s - EPSLN) < HALF_PI) {\n      lon = this.long0;\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Sinusoidal\", \"sinu\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nexport function init() {}\nimport {EPSLN} from '../constants/values';\n/* Mollweide forward equations--mapping lat,long to x,y\n    ----------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var theta = lat;\n  var con = Math.PI * Math.sin(lat);\n\n  /* Iterate using the Newton-Raphson method to find theta\n      -----------------------------------------------------*/\n  while (true) {\n    var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));\n    theta += delta_theta;\n    if (Math.abs(delta_theta) < EPSLN) {\n      break;\n    }\n  }\n  theta /= 2;\n\n  /* If the latitude is 90 deg, force the x coordinate to be \"0 + false easting\"\n       this is done here because of precision problems with \"cos(theta)\"\n       --------------------------------------------------------------------------*/\n  if (Math.PI / 2 - Math.abs(lat) < EPSLN) {\n    delta_lon = 0;\n  }\n  var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;\n  var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var theta;\n  var arg;\n\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  arg = p.y / (1.4142135623731 * this.a);\n\n  /* Because of division by zero problems, 'arg' can not be 1.  Therefore\n       a number very close to one is used instead.\n       -------------------------------------------------------------------*/\n  if (Math.abs(arg) > 0.999999999999) {\n    arg = 0.999999999999;\n  }\n  theta = Math.asin(arg);\n  var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));\n  if (lon < (-Math.PI)) {\n    lon = -Math.PI;\n  }\n  if (lon > Math.PI) {\n    lon = Math.PI;\n  }\n  arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;\n  if (Math.abs(arg) > 1) {\n    arg = 1;\n  }\n  var lat = Math.asin(arg);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mollweide\", \"moll\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport msfnz from '../common/msfnz';\nimport mlfn from '../common/mlfn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.lat2 = this.lat2 || this.lat1;\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n\n  this.sinphi = Math.sin(this.lat1);\n  this.cosphi = Math.cos(this.lat1);\n\n  this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);\n  this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);\n\n  if (Math.abs(this.lat1 - this.lat2) < EPSLN) {\n    this.ns = this.sinphi;\n  }\n  else {\n    this.sinphi = Math.sin(this.lat2);\n    this.cosphi = Math.cos(this.lat2);\n    this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);\n    this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);\n    this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);\n  }\n  this.g = this.ml1 + this.ms1 / this.ns;\n  this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  this.rh = this.a * (this.g - this.ml0);\n}\n\n/* Equidistant Conic forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var rh1;\n\n  /* Forward equations\n      -----------------*/\n  if (this.sphere) {\n    rh1 = this.a * (this.g - lat);\n  }\n  else {\n    var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);\n    rh1 = this.a * (this.g - ml);\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  var x = this.x0 + rh1 * Math.sin(theta);\n  var y = this.y0 + this.rh - rh1 * Math.cos(theta);\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  var con, rh1, lat, lon;\n  if (this.ns >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    lat = adjust_lat(this.g - rh1 / this.a);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    var ml = this.g - rh1 / this.a;\n    lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n\n}\n\nexport var names = [\"Equidistant_Conic\", \"eqdc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n/* Initialize the Van Der Grinten projection\n  ----------------------------------------*/\nexport function init() {\n  //this.R = 6370997; //Radius of earth\n  this.R = this.a;\n}\n\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  /* Forward equations\n    -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x, y;\n\n  if (Math.abs(lat) <= EPSLN) {\n    x = this.x0 + this.R * dlon;\n    y = this.y0;\n  }\n  var theta = asinz(2 * Math.abs(lat / Math.PI));\n  if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {\n    x = this.x0;\n    if (lat >= 0) {\n      y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);\n    }\n    else {\n      y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);\n    }\n    //  return(OK);\n  }\n  var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));\n  var asq = al * al;\n  var sinth = Math.sin(theta);\n  var costh = Math.cos(theta);\n\n  var g = costh / (sinth + costh - 1);\n  var gsq = g * g;\n  var m = g * (2 / sinth - 1);\n  var msq = m * m;\n  var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);\n  if (dlon < 0) {\n    con = -con;\n  }\n  x = this.x0 + con;\n  //con = Math.abs(con / (Math.PI * this.R));\n  var q = asq + g;\n  con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);\n  if (lat >= 0) {\n    //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 + con;\n  }\n  else {\n    //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 - con;\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Van Der Grinten inverse equations--mapping x,y to lat/long\n  ---------------------------------------------------------*/\nexport function inverse(p) {\n  var lon, lat;\n  var xx, yy, xys, c1, c2, c3;\n  var a1;\n  var m1;\n  var con;\n  var th1;\n  var d;\n\n  /* inverse equations\n    -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  con = Math.PI * this.R;\n  xx = p.x / con;\n  yy = p.y / con;\n  xys = xx * xx + yy * yy;\n  c1 = -Math.abs(yy) * (1 + xys);\n  c2 = c1 - 2 * yy * yy + xx * xx;\n  c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;\n  d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;\n  a1 = (c1 - c2 * c2 / 3 / c3) / c3;\n  m1 = 2 * Math.sqrt(-a1 / 3);\n  con = ((3 * d) / a1) / m1;\n  if (Math.abs(con) > 1) {\n    if (con >= 0) {\n      con = 1;\n    }\n    else {\n      con = -1;\n    }\n  }\n  th1 = Math.acos(con) / 3;\n  if (p.y >= 0) {\n    lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n  else {\n    lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n\n  if (Math.abs(xx) < EPSLN) {\n    lon = this.long0;\n  }\n  else {\n    lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Van_der_Grinten_I\", \"VanDerGrinten\", \"vandg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport asinz from '../common/asinz';\nimport imlfn from '../common/imlfn';\n\n\n\nexport function init() {\n  this.sin_p12 = Math.sin(this.lat0);\n  this.cos_p12 = Math.cos(this.lat0);\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var dlon = adjust_lon(lon - this.long0);\n  var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;\n  if (this.sphere) {\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\n      p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\n      p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //default case\n      cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\n      c = Math.acos(cos_c);\n      kp = c / Math.sin(c);\n      p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\n      p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\n      return p;\n    }\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\n      p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\n      p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //Default case\n      tanphi = sinphi / cosphi;\n      Nl1 = gN(this.a, this.e, this.sin_p12);\n      Nl = gN(this.a, this.e, sinphi);\n      psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));\n      Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));\n      if (Az === 0) {\n        s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {\n        s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else {\n        s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));\n      }\n      G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);\n      H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);\n      GH = G * H;\n      Hs = H * H;\n      s2 = s * s;\n      s3 = s2 * s;\n      s4 = s3 * s;\n      s5 = s4 * s;\n      c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);\n      p.x = this.x0 + c * Math.sin(Az);\n      p.y = this.y0 + c * Math.cos(Az);\n      return p;\n    }\n  }\n\n\n}\n\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F;\n  if (this.sphere) {\n    rh = Math.sqrt(p.x * p.x + p.y * p.y);\n    if (rh > (2 * HALF_PI * this.a)) {\n      return;\n    }\n    z = rh / this.a;\n\n    sinz = Math.sin(z);\n    cosz = Math.cos(z);\n\n    lon = this.long0;\n    if (Math.abs(rh) <= EPSLN) {\n      lat = this.lat0;\n    }\n    else {\n      lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);\n      con = Math.abs(this.lat0) - HALF_PI;\n      if (Math.abs(con) <= EPSLN) {\n        if (this.lat0 >= 0) {\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n        }\n        else {\n          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n        }\n      }\n      else {\n        /*con = cosz - this.sin_p12 * Math.sin(lat);\n        if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\n          //no-op, just keep the lon value as is\n        } else {\n          var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\n          lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\n        }*/\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\n      }\n    }\n\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = Mlp - rh;\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = rh - Mlp;\n\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else {\n      //default case\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      Az = Math.atan2(p.x, p.y);\n      N1 = gN(this.a, this.e, this.sin_p12);\n      cosAz = Math.cos(Az);\n      tmp = this.e * this.cos_p12 * cosAz;\n      A = -tmp * tmp / (1 - this.es);\n      B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);\n      D = rh / N1;\n      Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;\n      F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;\n      psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);\n      lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));\n      lat = Math.atan((1 - this.es * F * this.sin_p12 / Math.sin(psi)) * Math.tan(psi) / (1 - this.es));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n  }\n\n}\n\nexport var names = [\"Azimuthal_Equidistant\", \"aeqd\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nexport function init() {\n  //double temp;      /* temporary variable    */\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n}\n\n/* Orthographic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g, x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.a * ksp * cosphi * Math.sin(dlon);\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* height above ellipsoid      */\n  var z; /* angle          */\n  var sinz, cosz; /* sin of z and cos of z      */\n  var con;\n  var lon, lat;\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  z = asinz(rh / this.a);\n\n  sinz = Math.sin(z);\n  cosz = Math.cos(z);\n\n  lon = this.long0;\n  if (Math.abs(rh) <= EPSLN) {\n    lat = this.lat0;\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);\n  con = Math.abs(this.lat0) - HALF_PI;\n  if (Math.abs(con) <= EPSLN) {\n    if (this.lat0 >= 0) {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n    }\n    else {\n      lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"ortho\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","// QSC projection rewritten from the original PROJ4\n// https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c\n\nimport {EPSLN, TWO_PI, SPI, HALF_PI, FORTPI} from '../constants/values';\n\n/* constants */\nvar FACE_ENUM = {\n    FRONT: 1,\n    RIGHT: 2,\n    BACK: 3,\n    LEFT: 4,\n    TOP: 5,\n    BOTTOM: 6\n};\n\nvar AREA_ENUM = {\n    AREA_0: 1,\n    AREA_1: 2,\n    AREA_2: 3,\n    AREA_3: 4\n};\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Quadrilateralized Spherical Cube\";\n\n  /* Determine the cube face from the center of projection. */\n  if (this.lat0 >= HALF_PI - FORTPI / 2.0) {\n    this.face = FACE_ENUM.TOP;\n  } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {\n    this.face = FACE_ENUM.BOTTOM;\n  } else if (Math.abs(this.long0) <= FORTPI) {\n    this.face = FACE_ENUM.FRONT;\n  } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {\n    this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;\n  } else {\n    this.face = FACE_ENUM.BACK;\n  }\n\n  /* Fill in useful values for the ellipsoid <-> sphere shift\n   * described in [LK12]. */\n  if (this.es !== 0) {\n    this.one_minus_f = 1 - (this.a - this.b) / this.a;\n    this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;\n  }\n}\n\n// QSC forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n  var xy = {x: 0, y: 0};\n  var lat, lon;\n  var theta, phi;\n  var t, mu;\n  /* nu; */\n  var area = {value: 0};\n\n  // move lon according to projection's lon\n  p.x -= this.long0;\n\n  /* Convert the geodetic latitude to a geocentric latitude.\n   * This corresponds to the shift from the ellipsoid to the sphere\n   * described in [LK12]. */\n  if (this.es !== 0) {//if (P->es != 0) {\n    lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));\n  } else {\n    lat = p.y;\n  }\n\n  /* Convert the input lat, lon into theta, phi as used by QSC.\n   * This depends on the cube face and the area on it.\n   * For the top and bottom face, we can compute theta and phi\n   * directly from phi, lam. For the other faces, we must use\n   * unit sphere cartesian coordinates as an intermediate step. */\n  lon = p.x; //lon = lp.lam;\n  if (this.face === FACE_ENUM.TOP) {\n    phi = HALF_PI - lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = lon - HALF_PI;\n    } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = (lon > 0.0 ? lon - SPI : lon + SPI);\n    } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = lon + HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = lon;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = HALF_PI + lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = -lon + HALF_PI;\n    } else if (lon < FORTPI && lon >= -FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = -lon;\n    } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = -lon - HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);\n    }\n  } else {\n    var q, r, s;\n    var sinlat, coslat;\n    var sinlon, coslon;\n\n    if (this.face === FACE_ENUM.RIGHT) {\n      lon = qsc_shift_lon_origin(lon, +HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lon = qsc_shift_lon_origin(lon, +SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lon = qsc_shift_lon_origin(lon, -HALF_PI);\n    }\n    sinlat = Math.sin(lat);\n    coslat = Math.cos(lat);\n    sinlon = Math.sin(lon);\n    coslon = Math.cos(lon);\n    q = coslat * coslon;\n    r = coslat * sinlon;\n    s = sinlat;\n\n    if (this.face === FACE_ENUM.FRONT) {\n      phi = Math.acos(q);\n      theta = qsc_fwd_equat_face_theta(phi, s, r, area);\n    } else if (this.face === FACE_ENUM.RIGHT) {\n      phi = Math.acos(r);\n      theta = qsc_fwd_equat_face_theta(phi, s, -q, area);\n    } else if (this.face === FACE_ENUM.BACK) {\n      phi = Math.acos(-q);\n      theta = qsc_fwd_equat_face_theta(phi, s, -r, area);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      phi = Math.acos(-r);\n      theta = qsc_fwd_equat_face_theta(phi, s, q, area);\n    } else {\n      /* Impossible */\n      phi = theta = 0;\n      area.value = AREA_ENUM.AREA_0;\n    }\n  }\n\n  /* Compute mu and nu for the area of definition.\n   * For mu, see Eq. (3-21) in [OL76], but note the typos:\n   * compare with Eq. (3-14). For nu, see Eq. (3-38). */\n  mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));\n  t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));\n\n  /* Apply the result to the real area. */\n  if (area.value === AREA_ENUM.AREA_1) {\n    mu += HALF_PI;\n  } else if (area.value === AREA_ENUM.AREA_2) {\n    mu += SPI;\n  } else if (area.value === AREA_ENUM.AREA_3) {\n    mu += 1.5 * SPI;\n  }\n\n  /* Now compute x, y from mu and nu */\n  xy.x = t * Math.cos(mu);\n  xy.y = t * Math.sin(mu);\n  xy.x = xy.x * this.a + this.x0;\n  xy.y = xy.y * this.a + this.y0;\n\n  p.x = xy.x;\n  p.y = xy.y;\n  return p;\n}\n\n// QSC inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n  var lp = {lam: 0, phi: 0};\n  var mu, nu, cosmu, tannu;\n  var tantheta, theta, cosphi, phi;\n  var t;\n  var area = {value: 0};\n\n  /* de-offset */\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  /* Convert the input x, y to the mu and nu angles as used by QSC.\n   * This depends on the area of the cube face. */\n  nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));\n  mu = Math.atan2(p.y, p.x);\n  if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_0;\n  } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {\n    area.value = AREA_ENUM.AREA_1;\n    mu -= HALF_PI;\n  } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_2;\n    mu = (mu < 0.0 ? mu + SPI : mu - SPI);\n  } else {\n    area.value = AREA_ENUM.AREA_3;\n    mu += HALF_PI;\n  }\n\n  /* Compute phi and theta for the area of definition.\n   * The inverse projection is not described in the original paper, but some\n   * good hints can be found here (as of 2011-12-14):\n   * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302\n   * (search for \"Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>\") */\n  t = (SPI / 12) * Math.tan(mu);\n  tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));\n  theta = Math.atan(tantheta);\n  cosmu = Math.cos(mu);\n  tannu = Math.tan(nu);\n  cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));\n  if (cosphi < -1) {\n    cosphi = -1;\n  } else if (cosphi > +1) {\n    cosphi = +1;\n  }\n\n  /* Apply the result to the real area on the cube face.\n   * For the top and bottom face, we can compute phi and lam directly.\n   * For the other faces, we must use unit sphere cartesian coordinates\n   * as an intermediate step. */\n  if (this.face === FACE_ENUM.TOP) {\n    phi = Math.acos(cosphi);\n    lp.phi = HALF_PI - phi;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = theta;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = Math.acos(cosphi);\n    lp.phi = phi - HALF_PI;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = -theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = -theta;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = -theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);\n    }\n  } else {\n    /* Compute phi and lam via cartesian unit sphere coordinates. */\n    var q, r, s;\n    q = cosphi;\n    t = q * q;\n    if (t >= 1) {\n      s = 0;\n    } else {\n      s = Math.sqrt(1 - t) * Math.sin(theta);\n    }\n    t += s * s;\n    if (t >= 1) {\n      r = 0;\n    } else {\n      r = Math.sqrt(1 - t);\n    }\n    /* Rotate q,r,s into the correct area. */\n    if (area.value === AREA_ENUM.AREA_1) {\n      t = r;\n      r = -s;\n      s = t;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      r = -r;\n      s = -s;\n    } else if (area.value === AREA_ENUM.AREA_3) {\n      t = r;\n      r = s;\n      s = -t;\n    }\n    /* Rotate q,r,s into the correct cube face. */\n    if (this.face === FACE_ENUM.RIGHT) {\n      t = q;\n      q = -r;\n      r = t;\n    } else if (this.face === FACE_ENUM.BACK) {\n      q = -q;\n      r = -r;\n    } else if (this.face === FACE_ENUM.LEFT) {\n      t = q;\n      q = r;\n      r = -t;\n    }\n    /* Now compute phi and lam from the unit sphere coordinates. */\n    lp.phi = Math.acos(-s) - HALF_PI;\n    lp.lam = Math.atan2(r, q);\n    if (this.face === FACE_ENUM.RIGHT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);\n    }\n  }\n\n  /* Apply the shift from the sphere to the ellipsoid as described\n   * in [LK12]. */\n  if (this.es !== 0) {\n    var invert_sign;\n    var tanphi, xa;\n    invert_sign = (lp.phi < 0 ? 1 : 0);\n    tanphi = Math.tan(lp.phi);\n    xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);\n    lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));\n    if (invert_sign) {\n      lp.phi = -lp.phi;\n    }\n  }\n\n  lp.lam += this.long0;\n  p.x = lp.lam;\n  p.y = lp.phi;\n  return p;\n}\n\n/* Helper function for forward projection: compute the theta angle\n * and determine the area number. */\nfunction qsc_fwd_equat_face_theta(phi, y, x, area) {\n  var theta;\n  if (phi < EPSLN) {\n    area.value = AREA_ENUM.AREA_0;\n    theta = 0.0;\n  } else {\n    theta = Math.atan2(y, x);\n    if (Math.abs(theta) <= FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n    } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta -= HALF_PI;\n    } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = (theta >= 0.0 ? theta - SPI : theta + SPI);\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta += HALF_PI;\n    }\n  }\n  return theta;\n}\n\n/* Helper function: shift the longitude. */\nfunction qsc_shift_lon_origin(lon, offset) {\n  var slon = lon + offset;\n  if (slon < -SPI) {\n    slon += TWO_PI;\n  } else if (slon > +SPI) {\n    slon -= TWO_PI;\n  }\n  return slon;\n}\n\nexport var names = [\"Quadrilateralized Spherical Cube\", \"Quadrilateralized_Spherical_Cube\", \"qsc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n\n","// Robinson projection\n// Based on https://github.com/OSGeo/proj.4/blob/master/src/PJ_robin.c\n// Polynomial coeficients from http://article.gmane.org/gmane.comp.gis.proj-4.devel/6039\n\nimport {HALF_PI, D2R, R2D, EPSLN} from '../constants/values';\nimport adjust_lon from '../common/adjust_lon';\n\nvar COEFS_X = [\n    [1.0000, 2.2199e-17, -7.15515e-05, 3.1103e-06],\n    [0.9986, -0.000482243, -2.4897e-05, -1.3309e-06],\n    [0.9954, -0.00083103, -4.48605e-05, -9.86701e-07],\n    [0.9900, -0.00135364, -5.9661e-05, 3.6777e-06],\n    [0.9822, -0.00167442, -4.49547e-06, -5.72411e-06],\n    [0.9730, -0.00214868, -9.03571e-05, 1.8736e-08],\n    [0.9600, -0.00305085, -9.00761e-05, 1.64917e-06],\n    [0.9427, -0.00382792, -6.53386e-05, -2.6154e-06],\n    [0.9216, -0.00467746, -0.00010457, 4.81243e-06],\n    [0.8962, -0.00536223, -3.23831e-05, -5.43432e-06],\n    [0.8679, -0.00609363, -0.000113898, 3.32484e-06],\n    [0.8350, -0.00698325, -6.40253e-05, 9.34959e-07],\n    [0.7986, -0.00755338, -5.00009e-05, 9.35324e-07],\n    [0.7597, -0.00798324, -3.5971e-05, -2.27626e-06],\n    [0.7186, -0.00851367, -7.01149e-05, -8.6303e-06],\n    [0.6732, -0.00986209, -0.000199569, 1.91974e-05],\n    [0.6213, -0.010418, 8.83923e-05, 6.24051e-06],\n    [0.5722, -0.00906601, 0.000182, 6.24051e-06],\n    [0.5322, -0.00677797, 0.000275608, 6.24051e-06]\n];\n\nvar COEFS_Y = [\n    [-5.20417e-18, 0.0124, 1.21431e-18, -8.45284e-11],\n    [0.0620, 0.0124, -1.26793e-09, 4.22642e-10],\n    [0.1240, 0.0124, 5.07171e-09, -1.60604e-09],\n    [0.1860, 0.0123999, -1.90189e-08, 6.00152e-09],\n    [0.2480, 0.0124002, 7.10039e-08, -2.24e-08],\n    [0.3100, 0.0123992, -2.64997e-07, 8.35986e-08],\n    [0.3720, 0.0124029, 9.88983e-07, -3.11994e-07],\n    [0.4340, 0.0123893, -3.69093e-06, -4.35621e-07],\n    [0.4958, 0.0123198, -1.02252e-05, -3.45523e-07],\n    [0.5571, 0.0121916, -1.54081e-05, -5.82288e-07],\n    [0.6176, 0.0119938, -2.41424e-05, -5.25327e-07],\n    [0.6769, 0.011713, -3.20223e-05, -5.16405e-07],\n    [0.7346, 0.0113541, -3.97684e-05, -6.09052e-07],\n    [0.7903, 0.0109107, -4.89042e-05, -1.04739e-06],\n    [0.8435, 0.0103431, -6.4615e-05, -1.40374e-09],\n    [0.8936, 0.00969686, -6.4636e-05, -8.547e-06],\n    [0.9394, 0.00840947, -0.000192841, -4.2106e-06],\n    [0.9761, 0.00616527, -0.000256, -4.2106e-06],\n    [1.0000, 0.00328947, -0.000319159, -4.2106e-06]\n];\n\nvar FXC = 0.8487;\nvar FYC = 1.3523;\nvar C1 = R2D/5; // rad to 5-degree interval\nvar RC1 = 1/C1;\nvar NODES = 18;\n\nvar poly3_val = function(coefs, x) {\n    return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));\n};\n\nvar poly3_der = function(coefs, x) {\n    return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);\n};\n\nfunction newton_rapshon(f_df, start, max_err, iters) {\n    var x = start;\n    for (; iters; --iters) {\n        var upd = f_df(x);\n        x -= upd;\n        if (Math.abs(upd) < max_err) {\n            break;\n        }\n    }\n    return x;\n}\n\nexport function init() {\n    this.x0 = this.x0 || 0;\n    this.y0 = this.y0 || 0;\n    this.long0 = this.long0 || 0;\n    this.es = 0;\n    this.title = this.title || \"Robinson\";\n}\n\nexport function forward(ll) {\n    var lon = adjust_lon(ll.x - this.long0);\n\n    var dphi = Math.abs(ll.y);\n    var i = Math.floor(dphi * C1);\n    if (i < 0) {\n        i = 0;\n    } else if (i >= NODES) {\n        i = NODES - 1;\n    }\n    dphi = R2D * (dphi - RC1 * i);\n    var xy = {\n        x: poly3_val(COEFS_X[i], dphi) * lon,\n        y: poly3_val(COEFS_Y[i], dphi)\n    };\n    if (ll.y < 0) {\n        xy.y = -xy.y;\n    }\n\n    xy.x = xy.x * this.a * FXC + this.x0;\n    xy.y = xy.y * this.a * FYC + this.y0;\n    return xy;\n}\n\nexport function inverse(xy) {\n    var ll = {\n        x: (xy.x - this.x0) / (this.a * FXC),\n        y: Math.abs(xy.y - this.y0) / (this.a * FYC)\n    };\n\n    if (ll.y >= 1) { // pathologic case\n        ll.x /= COEFS_X[NODES][0];\n        ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;\n    } else {\n        // find table interval\n        var i = Math.floor(ll.y * NODES);\n        if (i < 0) {\n            i = 0;\n        } else if (i >= NODES) {\n            i = NODES - 1;\n        }\n        for (;;) {\n            if (COEFS_Y[i][0] > ll.y) {\n                --i;\n            } else if (COEFS_Y[i+1][0] <= ll.y) {\n                ++i;\n            } else {\n                break;\n            }\n        }\n        // linear interpolation in 5 degree interval\n        var coefs = COEFS_Y[i];\n        var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i+1][0] - coefs[0]);\n        // find t so that poly3_val(coefs, t) = ll.y\n        t = newton_rapshon(function(x) {\n            return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);\n        }, t, EPSLN, 100);\n\n        ll.x /= poly3_val(COEFS_X[i], t);\n        ll.y = (5 * i + t) * D2R;\n        if (xy.y < 0) {\n            ll.y = -ll.y;\n        }\n    }\n\n    ll.x = adjust_lon(ll.x + this.long0);\n    return ll;\n}\n\nexport var names = [\"Robinson\", \"robin\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import tmerc from './lib/projections/tmerc';\nimport etmerc from './lib/projections/etmerc';\nimport utm from './lib/projections/utm';\nimport sterea from './lib/projections/sterea';\nimport stere from './lib/projections/stere';\nimport somerc from './lib/projections/somerc';\nimport omerc from './lib/projections/omerc';\nimport lcc from './lib/projections/lcc';\nimport krovak from './lib/projections/krovak';\nimport cass from './lib/projections/cass';\nimport laea from './lib/projections/laea';\nimport aea from './lib/projections/aea';\nimport gnom from './lib/projections/gnom';\nimport cea from './lib/projections/cea';\nimport eqc from './lib/projections/eqc';\nimport poly from './lib/projections/poly';\nimport nzmg from './lib/projections/nzmg';\nimport mill from './lib/projections/mill';\nimport sinu from './lib/projections/sinu';\nimport moll from './lib/projections/moll';\nimport eqdc from './lib/projections/eqdc';\nimport vandg from './lib/projections/vandg';\nimport aeqd from './lib/projections/aeqd';\nimport ortho from './lib/projections/ortho';\nimport qsc from './lib/projections/qsc';\nimport robin from './lib/projections/robin';\nexport default function(proj4){\n  proj4.Proj.projections.add(tmerc);\n  proj4.Proj.projections.add(etmerc);\n  proj4.Proj.projections.add(utm);\n  proj4.Proj.projections.add(sterea);\n  proj4.Proj.projections.add(stere);\n  proj4.Proj.projections.add(somerc);\n  proj4.Proj.projections.add(omerc);\n  proj4.Proj.projections.add(lcc);\n  proj4.Proj.projections.add(krovak);\n  proj4.Proj.projections.add(cass);\n  proj4.Proj.projections.add(laea);\n  proj4.Proj.projections.add(aea);\n  proj4.Proj.projections.add(gnom);\n  proj4.Proj.projections.add(cea);\n  proj4.Proj.projections.add(eqc);\n  proj4.Proj.projections.add(poly);\n  proj4.Proj.projections.add(nzmg);\n  proj4.Proj.projections.add(mill);\n  proj4.Proj.projections.add(sinu);\n  proj4.Proj.projections.add(moll);\n  proj4.Proj.projections.add(eqdc);\n  proj4.Proj.projections.add(vandg);\n  proj4.Proj.projections.add(aeqd);\n  proj4.Proj.projections.add(ortho);\n  proj4.Proj.projections.add(qsc);\n  proj4.Proj.projections.add(robin);\n}","import proj4 from './core';\nimport Proj from \"./Proj\";\nimport Point from \"./Point\";\nimport common from \"./common/toPoint\";\nimport defs from \"./defs\";\nimport transform from \"./transform\";\nimport mgrs from \"mgrs\";\nimport version from \"./version\";\nimport includedProjections from \"../projs\";\n\nproj4.defaultDatum = 'WGS84'; //default datum\nproj4.Proj = Proj;\nproj4.WGS84 = new proj4.Proj('WGS84');\nproj4.Point = Point;\nproj4.toPoint = common;\nproj4.defs = defs;\nproj4.transform = transform;\nproj4.mgrs = mgrs;\nproj4.version = version;\nincludedProjections(proj4);\nexport default proj4;\n","<template>\r\n  <div id=\"cyclo-container\"\r\n       :class=\"this.cycloContainerClass\"\r\n  >\r\n  <!-- v-once -->\r\n    <div id=\"inCycloDiv\"\r\n         @click=\"this.popoutClicked\"\r\n         :style=\"{ right: popoutPosition }\"\r\n         v-if=\"this.isMobileOrTablet === false && this.popoutAble === true\"\r\n    >\r\n      <font-awesome-icon icon=\"external-link-alt\" class=\"popout-icon\" />\r\n    </div>\r\n    <div id=\"cycloviewer\"\r\n         ref=\"cycloviewer\"\r\n         class=\"panoramaViewerWindow\"\r\n    >\r\n    <!-- @mousedown=\"console.log('mouseup')\" -->\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import proj4 from 'proj4';\r\n\r\n  export default {\r\n    name: 'CyclomediaWidget',\r\n    data() {\r\n      return {\r\n        'docWidth': 0,\r\n        'divWidth': 0,\r\n        'popoutPosition': 0,\r\n      }\r\n    },\r\n    props: ['screenPercent'],\r\n    computed: {\r\n      isMobileOrTablet() {\r\n        return this.$store.state.isMobileOrTablet;\r\n      },\r\n      fullScreenMapEnabled() {\r\n        return this.$store.state.fullScreenMapEnabled;\r\n      },\r\n      popoutAble() {\r\n        let answer;\r\n        if (this.$config.cyclomedia.popoutAble === false) {\r\n          answer = false\r\n        } else {\r\n          answer = true\r\n        }\r\n        return answer\r\n      },\r\n      cyclomediaInitialized() {\r\n        return this.$store.state.cyclomedia.initialized;\r\n      },\r\n      cyclomediaActive() {\r\n        return this.$store.state.cyclomedia.active;\r\n      },\r\n      pictometryActive() {\r\n        return this.$store.state.pictometry.active;\r\n      },\r\n      cycloContainerClass() {\r\n        if (this.pictometryActive) {\r\n          return 'medium-16 large-16 columns mb-panel'\r\n        } else {\r\n          return 'medium-24 large-24 columns mb-panel'\r\n        }\r\n      },\r\n      locForCyclo() {\r\n        // console.log('computing locForCyclo');\r\n        const geocodeData = this.$store.state.geocode.data;\r\n        const map = this.$store.state.map.map;\r\n        if (geocodeData) {\r\n          return [geocodeData.geometry.coordinates[1], geocodeData.geometry.coordinates[0]];\r\n        }\r\n      },\r\n      latLngFromMap() {\r\n        return this.$store.state.cyclomedia.latLngFromMap;\r\n      },\r\n      mapCenter() {\r\n        return this.$store.state.map.center;\r\n      },\r\n      navBarOpen() {\r\n        return this.$store.state.cyclomedia.navBarOpen;\r\n      },\r\n      projection4326() {\r\n        return \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\";\r\n      },\r\n      projection2272() {\r\n        return \"+proj=lcc +lat_1=40.96666666666667 +lat_2=39.93333333333333 +lat_0=39.33333333333334 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs\";\r\n      },\r\n      // surfaceCursorOn() {\r\n      //   return this.$store.state.cyclomedia.surfaceCursorOn;\r\n      // }\r\n    },\r\n    watch: {\r\n      fullScreenMapEnabled() {\r\n        this.setDivWidth();\r\n      },\r\n      locForCyclo(newCoords) {\r\n        // console.log('watch locForCyclo is firing, setNewLocation running with newCoords:', newCoords);\r\n        if (newCoords) {\r\n          this.setNewLocation(newCoords);\r\n        }\r\n      },\r\n      latLngFromMap(newCoords) {\r\n        // console.log('watch latLngFromMap is firing, setNewLocation running with newCoords:', newCoords);\r\n        if (this.cyclomediaInitialized) {\r\n\r\n          if (Array.isArray(newCoords)) {\r\n            // console.log('it is an array');\r\n            this.setNewLocation([newCoords[1], newCoords[0]]);\r\n          } else {\r\n            // console.log('it is not an array');\r\n            this.setNewLocation([newCoords.lat, newCoords.lng]);\r\n          }\r\n        }\r\n      },\r\n      // docWidthComp() {\r\n      //   console.log('docWidth changed');\r\n      // }\r\n      cyclomediaInitialized() {\r\n        StreetSmartApi.init({\r\n          targetElement: this.$refs.cycloviewer,\r\n          username: this.$config.cyclomedia.username,\r\n          password: this.$config.cyclomedia.password,\r\n          apiKey: this.$config.cyclomedia.apiKey,\r\n          // srs: 'EPSG:4326',\r\n          srs: 'EPSG:2272',\r\n          locale: 'en-us',\r\n          addressSettings: {\r\n            locale: 'en-us',\r\n            database: 'CMDatabase'\r\n          }\r\n        }).then (\r\n          () => {\r\n            // get map center and set location\r\n            const latLngFromMap = this.$store.state.cyclomedia.latLngFromMap;\r\n            this.setNewLocation([latLngFromMap[0], latLngFromMap[1]]);\r\n          },\r\n          err => {\r\n            // console.log('Api: init: failed. Error: ', err);\r\n          }\r\n        );\r\n        window.addEventListener('resize', this.setDivWidth);\r\n      },\r\n      cyclomediaActive(newActiveStatus) {\r\n        this.setDivWidth();\r\n        if (newActiveStatus === true) {\r\n          this.setNewLocation(this.latLngFromMap);\r\n        }\r\n      },\r\n      // pictometryActive() {\r\n      //   this.setDivWidth();\r\n      // }\r\n    },\r\n    updated() {\r\n      // console.log('cyclomedia updated running');\r\n      // TODO find a better way to get the image to update and not be stretched\r\n      // const viewer = this.$store.state.cyclomedia.viewer;\r\n      if (this.cyclomediaActive) {\r\n        if (window.panoramaViewer) {\r\n          window.panoramaViewer.rotateRight(0.0000001);\r\n        }\r\n      }\r\n      this.setDivWidth();\r\n    },\r\n    methods: {\r\n      setDivWidth() {\r\n        const docWidth = document.body.clientWidth;\r\n        this.docWidth = docWidth;\r\n        const el = document.getElementById('cyclo-container');\r\n        const divStyle = window.getComputedStyle(el);\r\n        const divWidth = parseFloat(divStyle.getPropertyValue('width').replace('px', ''));\r\n        this.divWidth = divWidth;\r\n        // console.log('setDivWidth is running, docWidth:', docWidth, 'divWidth', divWidth);\r\n        let answer;\r\n        if (this.fullScreenMapEnabled || docWidth < 750) {\r\n          // console.log('setDivWidth is running, first option')\r\n          answer = docWidth - divWidth + 'px';\r\n        } else {\r\n          // console.log('setDivWidth is running, second option')\r\n          answer = docWidth - (docWidth/this.$props.screenPercent + divWidth) + 'px';\r\n        }\r\n        // console.log('setDivWidth, answer:', answer);\r\n        this.popoutPosition = answer;\r\n        // return width;\r\n      },\r\n      setNewLocation(coords) {\r\n        // console.log('cyclomedia setNewLocation is running using', coords);\r\n        if (!coords) {\r\n          return;\r\n        }\r\n        const viewerType = StreetSmartApi.ViewerType.PANORAMA;\r\n        const coords2272 = proj4(this.projection4326, this.projection2272, [coords[1], coords[0]]);\r\n        // StreetSmartApi.open(center.lng + ',' + center.lat, {\r\n        // StreetSmartApi.open(coords[1] + ',' + coords[0], {\r\n        StreetSmartApi.open(coords2272[0] + ',' + coords2272[1], {\r\n          viewerType: viewerType,\r\n          srs: 'EPSG:2272',\r\n          // srs: 'EPSG:4326',\r\n          panoramaViewer: {\r\n            closable: false,\r\n            maximizable: false,\r\n          }\r\n        }).then (\r\n          function(result) {\r\n            // console.log('StreetSmartApi2, result:', result);\r\n            const widget = this;\r\n            // console.log('Created component through API:', result);\r\n            if (result) {\r\n              for (let i =0; i < result.length; i++) {\r\n                if(result[i].getType() === StreetSmartApi.ViewerType.PANORAMA) window.panoramaViewer = result[i];\r\n              }\r\n              widget.sendOrientationToStore();\r\n\r\n              // StreetSmartApi.removeOverlay()\r\n              window.panoramaViewer.toggleNavbarExpanded(widget.navBarOpen);\r\n              // if (widget.isMobileOrTablet) {\r\n              // console.log('about to remove surfaceCursorLayer');\r\n              // StreetSmartApi.removeOverlay('surfaceCursorLayer');\r\n              // console.log('removed surfaceCursorLayer');\r\n              // }\r\n\r\n              // StreetSmartApi.removeOverlay('measurementLayer');\r\n              // window.panoramaViewer.toggleButtonEnabled('panorama.measure', false);\r\n              window.panoramaViewer.toggleButtonEnabled('panorama.elevation', false);\r\n              window.panoramaViewer.toggleButtonEnabled('panorama.reportBlurring', false);\r\n\r\n              for (let overlay of window.panoramaViewer.props.overlays) {\r\n                // console.log('overlay:', overlay);\r\n                if (overlay.id === 'surfaceCursorLayer') {\r\n                  if (overlay.visible === true) {\r\n                    window.panoramaViewer.toggleOverlay(overlay);\r\n                    // overlay.visible = false;\r\n                  }\r\n                }\r\n              }\r\n\r\n              if (!this.$config.cyclomedia.measurementAllowed || this.$config.cyclomedia.measurementAllowed === 'false') {\r\n                StreetSmartApi.removeOverlay('measurementLayer');\r\n                window.panoramaViewer.toggleButtonEnabled('panorama.measure', false);\r\n              }\r\n\r\n              window.panoramaViewer.on('VIEW_CHANGE', function() {\r\n                if (window.panoramaViewer.props.orientation.yaw !== widget.$store.state.cyclomedia.orientation.yaw ||\r\n                    window.panoramaViewer.props.orientation.xyz !== widget.$store.state.cyclomedia.orientation.xyz\r\n                ) {\r\n                  // console.log('on VIEW_CHANGE fired with yaw change', window.panoramaViewer.props.orientation);\r\n                  widget.sendOrientationToStore();\r\n                } else if (window.panoramaViewer.getNavbarExpanded() !== this.navBarOpen) {\r\n                  widget.$store.commit('setCyclomediaNavBarOpen', window.panoramaViewer.getNavbarExpanded());\r\n                }\r\n              })\r\n\r\n              window.panoramaViewer.on('VIEW_LOAD_END', function() {\r\n                if (window.panoramaViewer.props.orientation.yaw !== widget.$store.state.cyclomedia.orientation.yaw ||\r\n                    window.panoramaViewer.props.orientation.xyz !== widget.$store.state.cyclomedia.orientation.xyz\r\n                ) {\r\n                  // console.log('on VIEW_CHANGE fired with yaw change', window.panoramaViewer.props.orientation);\r\n                  widget.sendOrientationToStore();\r\n                } else if (window.panoramaViewer.getNavbarExpanded() !== this.navBarOpen) {\r\n                  widget.$store.commit('setCyclomediaNavBarOpen', window.panoramaViewer.getNavbarExpanded());\r\n                }\r\n              })\r\n            }\r\n          }.bind(this)\r\n        ).catch(\r\n          function(reason) {\r\n            // console.log('Failed to create component(s) through API: ' + reason);\r\n          }\r\n        );\r\n\r\n        // const viewer = this.$store.state.cyclomedia.viewer;\r\n        // viewer.openByCoordinate(coords);\r\n      },\r\n      sendOrientationToStore() {\r\n        // console.log('sendOrientationToStore, yaw:', window.panoramaViewer.props.orientation.yaw);\r\n        this.$store.commit('setCyclomediaYaw', window.panoramaViewer.props.orientation.yaw)\r\n        this.$store.commit('setCyclomediaHFov', window.panoramaViewer.props.orientation.hFov)\r\n        const xy = [window.panoramaViewer.props.orientation.xyz[0], window.panoramaViewer.props.orientation.xyz[1]];\r\n        const lnglat = proj4(this.projection2272, this.projection4326, xy);\r\n        // console.log('xy:', xy, 'lnglat', lnglat);\r\n        this.$store.commit('setCyclomediaXyz', lnglat);\r\n      },\r\n      popoutClicked() {\r\n        const map = this.$store.state.map.map;\r\n        const center = map.getCenter();\r\n        window.open('//cyclomedia.phila.gov/?' + center.lat + '&' + center.lng, '_blank');\r\n        this.$store.commit('setCyclomediaActive', false);\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style scoped>\r\n\r\n#cyclo-container {\r\n  padding: 0px;\r\n  height: 50%;\r\n  /* display: none; */\r\n}\r\n\r\n@media screen and (min-width: 46.875em) {\r\n  #cyclo-container {\r\n    display: block;\r\n  }\r\n}\r\n\r\n@media (max-width: 749px) {\r\n  #cyclo-container {\r\n    height: 200px;\r\n  }\r\n}\r\n\r\n#inCycloDiv {\r\n  /* position: absolute; */\r\n  position: absolute;\r\n  /* top: 0px; */\r\n  right: 0px;\r\n  /* float: right; */\r\n  background-color: white;\r\n  border: 0px solid;\r\n  width: 30px;\r\n  height: 30px;\r\n  cursor:pointer;\r\n  z-index: 10;\r\n}\r\n\r\n.popout-icon {\r\n  margin-top: 8.5px;\r\n  font-size: 15px;\r\n  margin-left: 8.5px;\r\n}\r\n\r\n.panoramaViewerWindow {\r\n  display: block;\r\n  width: 100%;\r\n  height:100%;\r\n}\r\n\r\n@media screen and (max-width: 46.875em) {\r\n  .cyclo-container {\r\n    /* display: none; */\r\n  }\r\n}\r\n\r\n</style>\r\n","import mod from \"-!../../../../cache-loader/dist/cjs.js??ref--12-0!../../../../thread-loader/dist/cjs.js!../../../../babel-loader/lib/index.js!../../../../cache-loader/dist/cjs.js??ref--0-0!../../../../vue-loader/lib/index.js??vue-loader-options!./Widget.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../cache-loader/dist/cjs.js??ref--12-0!../../../../thread-loader/dist/cjs.js!../../../../babel-loader/lib/index.js!../../../../cache-loader/dist/cjs.js??ref--0-0!../../../../vue-loader/lib/index.js??vue-loader-options!./Widget.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Widget.vue?vue&type=template&id=51535d13&scoped=true&\"\nimport script from \"./Widget.vue?vue&type=script&lang=js&\"\nexport * from \"./Widget.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Widget.vue?vue&type=style&index=0&id=51535d13&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"51535d13\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}